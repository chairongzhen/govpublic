var __read = this && this.__read || function (o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
      r,
      ar = [],
      e;

  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
      ar.push(r.value);
    }
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }

  return ar;
};

import { useRef, useState } from 'react';
import useCreation from '../useCreation';
var proxyMap = new WeakMap();

function observer(initialVal, cb) {
  var existingProxy = proxyMap.get(initialVal); // 添加缓存 防止重新构建proxy

  if (existingProxy) {
    return existingProxy;
  }

  var proxy = new Proxy(initialVal, {
    get: function get(target, key, receiver) {
      var res = Reflect.get(target, key, receiver);
      return typeof res === 'object' ? observer(res, cb) : Reflect.get(target, key);
    },
    set: function set(target, key, val) {
      var ret = Reflect.set(target, key, val);
      cb();
      return ret;
    }
  });
  proxyMap.set(initialVal, proxy);
  return proxy;
}

function useReactive(initialState) {
  var _a = __read(useState({}), 2),
      setFlag = _a[1];

  var stateRef = useRef(initialState);
  var state = useCreation(function () {
    return observer(stateRef.current, function () {
      setFlag({});
    });
  }, []);
  return state;
}

export default useReactive;