import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

/* eslint-disable react/prop-types */
import * as React from 'react';
import classNames from 'classnames';
import Animate from 'rc-animate';
import shallowEqual from 'shallowequal';
import PanelContent from './PanelContent';

var CollapsePanel = /*#__PURE__*/function (_React$Component) {
  _inherits(CollapsePanel, _React$Component);

  var _super = _createSuper(CollapsePanel);

  function CollapsePanel() {
    var _this;

    _classCallCheck(this, CollapsePanel);

    _this = _super.apply(this, arguments);

    _this.handleItemClick = function () {
      var _this$props = _this.props,
          onItemClick = _this$props.onItemClick,
          panelKey = _this$props.panelKey;

      if (typeof onItemClick === 'function') {
        onItemClick(panelKey);
      }
    };

    _this.handleKeyPress = function (e) {
      if (e.key === 'Enter' || e.keyCode === 13 || e.which === 13) {
        _this.handleItemClick();
      }
    };

    return _this;
  }

  _createClass(CollapsePanel, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      return !shallowEqual(this.props, nextProps);
    }
  }, {
    key: "render",
    value: function render() {
      var _classNames,
          _classNames2,
          _this2 = this;

      var _this$props2 = this.props,
          className = _this$props2.className,
          id = _this$props2.id,
          style = _this$props2.style,
          prefixCls = _this$props2.prefixCls,
          header = _this$props2.header,
          headerClass = _this$props2.headerClass,
          children = _this$props2.children,
          isActive = _this$props2.isActive,
          showArrow = _this$props2.showArrow,
          destroyInactivePanel = _this$props2.destroyInactivePanel,
          disabled = _this$props2.disabled,
          accordion = _this$props2.accordion,
          forceRender = _this$props2.forceRender,
          expandIcon = _this$props2.expandIcon,
          extra = _this$props2.extra,
          headerCollapsableOnly = _this$props2.headerCollapsableOnly;
      var headerCls = classNames("".concat(prefixCls, "-header"), (_classNames = {}, _defineProperty(_classNames, headerClass, headerClass), _defineProperty(_classNames, "".concat(prefixCls, "-header-collapsable-only"), headerCollapsableOnly), _classNames));
      var itemCls = classNames((_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls, "-item"), true), _defineProperty(_classNames2, "".concat(prefixCls, "-item-active"), isActive), _defineProperty(_classNames2, "".concat(prefixCls, "-item-disabled"), disabled), _classNames2), className);
      var icon = React.createElement("i", {
        className: "arrow"
      });

      if (showArrow && typeof expandIcon === 'function') {
        icon = expandIcon(this.props);
      }

      return React.createElement("div", {
        className: itemCls,
        style: style,
        id: id
      }, React.createElement("div", {
        className: headerCls,
        onClick: function onClick() {
          return !headerCollapsableOnly && _this2.handleItemClick();
        },
        role: accordion ? 'tab' : 'button',
        tabIndex: disabled ? -1 : 0,
        "aria-expanded": isActive,
        onKeyPress: this.handleKeyPress
      }, showArrow && icon, headerCollapsableOnly ? React.createElement("span", {
        onClick: this.handleItemClick,
        className: "".concat(prefixCls, "-header-text")
      }, header) : header, extra && React.createElement("div", {
        className: "".concat(prefixCls, "-extra")
      }, extra)), React.createElement(Animate, {
        showProp: "isActive",
        exclusive: true,
        component: "",
        animation: this.props.openAnimation
      }, React.createElement(PanelContent, {
        prefixCls: prefixCls,
        isActive: isActive,
        destroyInactivePanel: destroyInactivePanel,
        forceRender: forceRender,
        role: accordion ? 'tabpanel' : null
      }, children)));
    }
  }]);

  return CollapsePanel;
}(React.Component);

CollapsePanel.defaultProps = {
  showArrow: true,
  isActive: false,
  destroyInactivePanel: false,
  onItemClick: function onItemClick() {},
  headerClass: '',
  forceRender: false
};
export default CollapsePanel;