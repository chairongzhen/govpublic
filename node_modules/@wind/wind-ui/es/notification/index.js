function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import Notification from 'rc-notification';
import classNames from 'classnames';
import CheckCircleO from "@wind/icons/es/icons/CheckCircleO";
import InfoCircleO from "@wind/icons/es/icons/InfoCircleO";
import ExclamationO from "@wind/icons/es/icons/ExclamationO";
import CloseCircleO from "@wind/icons/es/icons/CloseCircleO";
import CloseO from "@wind/icons/es/icons/CloseO";
var notificationInstance = {};
var defaultDuration = 4.5;
var defaultTop = 24;
var defaultBottom = 24;
var defaultPlacement = 'topRight';
var defaultGetContainer;

function setNotificationConfig(options) {
  var duration = options.duration,
      placement = options.placement,
      bottom = options.bottom,
      top = options.top,
      getContainer = options.getContainer;
  var needRemove = false;

  if (duration !== undefined) {
    defaultDuration = duration;
  }

  if (placement !== undefined) {
    defaultPlacement = placement;
  }

  if (bottom !== undefined) {
    defaultBottom = bottom;
    needRemove = true;
  }

  if (top !== undefined) {
    defaultTop = top;
    needRemove = true;
  }

  if (getContainer !== undefined) {
    defaultGetContainer = getContainer;
    needRemove = true;
  }

  if (needRemove) {
    removeInstance();
  }
} // 部分配置变化时需要重新生成 Instance，故不建议经常调用 config 方法。


function removeInstance() {
  // 重新生成 Instance
  Object.keys(notificationInstance).forEach(function (cacheKey) {
    return notificationInstance[cacheKey] = null;
  });
}

function getPlacementStyle(placement) {
  var top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultTop;
  var bottom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultBottom;
  var style;

  switch (placement) {
    case 'topLeft':
      style = {
        left: 0,
        top: top,
        bottom: 'auto'
      };
      break;

    case 'topRight':
      style = {
        right: 0,
        top: top,
        bottom: 'auto'
      };
      break;

    case 'bottomLeft':
      style = {
        left: 0,
        top: 'auto',
        bottom: bottom
      };
      break;

    default:
      style = {
        right: 0,
        top: 'auto',
        bottom: bottom
      };
      break;
  }

  return style;
}

function getNotificationInstance(_ref, callback) {
  var prefixCls = _ref.prefixCls,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? defaultPlacement : _ref$placement,
      _ref$getContainer = _ref.getContainer,
      getContainer = _ref$getContainer === void 0 ? defaultGetContainer : _ref$getContainer,
      top = _ref.top,
      bottom = _ref.bottom;
  var cacheKey = "".concat(prefixCls, "-").concat(placement);

  if (notificationInstance[cacheKey]) {
    callback(notificationInstance[cacheKey]);
    return;
  }

  Notification.newInstance({
    prefixCls: prefixCls,
    className: "".concat(prefixCls, "-").concat(placement),
    style: getPlacementStyle(placement, top, bottom),
    getContainer: getContainer,
    closeIcon: /*#__PURE__*/React.createElement(CloseO, null)
  }, function (notification) {
    notificationInstance[cacheKey] = notification;
    callback(notification);
  });
}

var typeToIcon = {
  success: /*#__PURE__*/React.createElement(CheckCircleO, {
    className: "w-notification-notice-icon w-notification-notice-icon-success"
  }),
  info: /*#__PURE__*/React.createElement(InfoCircleO, {
    className: "w-notification-notice-icon w-notification-notice-icon-info"
  }),
  error: /*#__PURE__*/React.createElement(CloseCircleO, {
    className: "w-notification-notice-icon w-notification-notice-icon-error"
  }),
  warning: /*#__PURE__*/React.createElement(ExclamationO, {
    className: "w-notification-notice-icon w-notification-notice-icon-warning"
  })
};

function notice(args) {
  var outerPrefixCls = args.prefixCls || 'w-notification';
  var prefixCls = "".concat(outerPrefixCls, "-notice");
  var duration = args.duration === undefined ? defaultDuration : args.duration;
  var iconNode = null;

  if (args.icon) {
    iconNode = /*#__PURE__*/React.createElement("span", {
      className: "".concat(prefixCls, "-icon")
    }, args.icon);
  } else if (args.type) {
    var iconType = typeToIcon[args.type];
    iconNode = iconType;
  }

  var autoMarginTag = !args.description && iconNode ? /*#__PURE__*/React.createElement("span", {
    className: "".concat(prefixCls, "-message-single-line-auto-margin")
  }) : null;
  var placement = args.placement;
  getNotificationInstance({
    prefixCls: outerPrefixCls,
    placement: placement
  }, function (notification) {
    notification.notice({
      content: /*#__PURE__*/React.createElement("div", {
        className: classNames(iconNode ? "".concat(prefixCls, "-with-icon") : '', !args.description ? "".concat(prefixCls, "-title-only") : '')
      }, iconNode, /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "-message")
      }, autoMarginTag, args.message), /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "-description")
      }, args.description), args.btn ? /*#__PURE__*/React.createElement("span", {
        className: "".concat(prefixCls, "-btn")
      }, args.btn) : null),
      duration: duration,
      closable: true,
      onClose: args.onClose,
      onClick: args.onClick,
      key: args.key,
      style: args.style || {},
      className: args.className
    });
  });
}

var api = {
  open: notice,
  close: function close(key) {
    Object.keys(notificationInstance).forEach(function (cacheKey) {
      return notificationInstance[cacheKey].removeNotice(key);
    });
  },
  config: setNotificationConfig,
  destroy: function destroy() {
    Object.keys(notificationInstance).forEach(function (cacheKey) {
      notificationInstance[cacheKey].destroy();
      delete notificationInstance[cacheKey];
    });
  }
};
['success', 'info', 'warning', 'error'].forEach(function (type) {
  api[type] = function (args) {
    return api.open(_extends(_extends({}, args), {
      type: type
    }));
  };
});
api.warn = api.warning;
export default api;
//# sourceMappingURL=index.js.map
