import React from 'react';
import Dragger from './Dragger';
import { UploadProps, UploadFile, UploadChangeParam } from './interface';
import { T } from './utils';
export interface UploadContext {
    antLocale?: {
        Upload?: any;
    };
}
export { UploadProps };
export default class Upload extends React.Component<UploadProps, any> {
    static Dragger: typeof Dragger;
    static defaultProps: {
        prefixCls: string;
        type: string;
        multiple: boolean;
        action: string;
        data: {};
        accept: string;
        beforeUpload: typeof T;
        showUploadList: boolean;
        listType: string;
        className: string;
        disabled: boolean;
        supportServerRender: boolean;
    };
    static contextTypes: {
        antLocale: any;
    };
    context: UploadContext;
    recentUploadStatus: boolean | PromiseLike<any>;
    progressTimer: any;
    refs: {
        [key: string]: any;
        upload: any;
    };
    constructor(props: Readonly<UploadProps>);
    componentWillUnmount(): void;
    getLocale(): {
        uploading?: string | undefined;
        removeFile?: string | undefined;
        uploadError?: string | undefined;
        previewFile?: string | undefined;
    } | {
        uploading?: string | undefined;
        removeFile?: string | undefined;
        uploadError?: string | undefined;
        previewFile?: string | undefined;
    };
    onStart: (file: any[]) => void;
    autoUpdateProgress(_: number, file: any): void;
    onSuccess: (response: string, file: any) => void;
    onProgress: (e: {
        percent: any;
    }, file: any) => void;
    onError: (error: any, response: any, file: any) => void;
    handleRemove(file: UploadFile): void;
    handleManualRemove: (file: UploadFile) => void;
    onChange: (info: UploadChangeParam) => void;
    componentWillReceiveProps(nextProps: {
        fileList: any;
    }): void;
    onFileDrop: (e: {
        type: any;
    }) => void;
    clearProgressTimer(): void;
    render(): JSX.Element;
}
