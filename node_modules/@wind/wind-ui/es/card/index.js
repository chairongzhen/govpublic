function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

import React, { Component, Children } from 'react';
import classNames from 'classnames';
import addEventListener from "rc-util/es/Dom/addEventListener";
import Grid from './Grid';
import { throttleByAnimationFrameDecorator } from '../_util/throttleByAnimationFrame';

var Card = /*#__PURE__*/function (_Component) {
  _inherits(Card, _Component);

  var _super = _createSuper(Card);

  function Card() {
    var _this;

    _classCallCheck(this, Card);

    _this = _super.apply(this, arguments);
    _this.state = {
      widerPadding: false
    };

    _this.saveRef = function (node) {
      _this.container = node;
    };

    return _this;
  }

  _createClass(Card, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.updateWiderPadding();
      this.resizeEvent = addEventListener(window, 'resize', this.updateWiderPadding);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.resizeEvent) {
        this.resizeEvent.remove();
      }

      this.updateWiderPadding.cancel();
    }
  }, {
    key: "updateWiderPadding",
    value: function updateWiderPadding() {
      var _this2 = this;

      if (!this.container) {
        return;
      } // 936 is a magic card width pixer number indicated by designer


      var WIDTH_BOUDARY_PX = 936;

      if (this.container.offsetWidth >= WIDTH_BOUDARY_PX && !this.state.widerPadding) {
        this.setState({
          widerPadding: true
        }, function () {
          _this2.updateWiderPaddingCalled = true; // first render without css transition
        });
      }

      if (this.container.offsetWidth < WIDTH_BOUDARY_PX && this.state.widerPadding) {
        this.setState({
          widerPadding: false
        }, function () {
          _this2.updateWiderPaddingCalled = true; // first render without css transition
        });
      }
    }
  }, {
    key: "isContainGrid",
    value: function isContainGrid() {
      var containGrid;
      Children.forEach(this.props.children, function (element) {
        if (element && element.type && element.type === Grid) {
          containGrid = true;
        }
      });
      return containGrid;
    }
  }, {
    key: "render",
    value: function render() {
      var _classNames;

      var _a = this.props,
          _a$prefixCls = _a.prefixCls,
          prefixCls = _a$prefixCls === void 0 ? 'w-card' : _a$prefixCls,
          className = _a.className,
          extra = _a.extra,
          bodyStyle = _a.bodyStyle,
          _a$hoverable = _a.hoverable,
          hoverable = _a$hoverable === void 0 ? false : _a$hoverable,
          _a$selected = _a.selected,
          selected = _a$selected === void 0 ? false : _a$selected,
          _a$size = _a.size,
          size = _a$size === void 0 ? 'default' : _a$size,
          title = _a.title,
          loading = _a.loading,
          _a$bordered = _a.bordered,
          bordered = _a$bordered === void 0 ? false : _a$bordered,
          _a$shadowed = _a.shadowed,
          shadowed = _a$shadowed === void 0 ? true : _a$shadowed,
          divider = _a.divider,
          others = __rest(_a, ["prefixCls", "className", "extra", "bodyStyle", "hoverable", "selected", "size", "title", "loading", "bordered", "shadowed", "divider"]);

      var children = this.props.children;
      var classString = classNames(prefixCls, className, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-loading"), loading), _defineProperty(_classNames, "".concat(prefixCls, "-bordered"), bordered), _defineProperty(_classNames, "".concat(prefixCls, "-hoverable"), hoverable), _defineProperty(_classNames, "".concat(prefixCls, "-shadowed"), shadowed), _defineProperty(_classNames, "".concat(prefixCls, "-wider-padding"), this.state.widerPadding), _defineProperty(_classNames, "".concat(prefixCls, "-padding-transition"), this.updateWiderPaddingCalled), _defineProperty(_classNames, "".concat(prefixCls, "-contain-grid"), this.isContainGrid()), _defineProperty(_classNames, "".concat(prefixCls, "-selected"), selected), _defineProperty(_classNames, "".concat(prefixCls, "-").concat(size), size != null && size !== 'default'), _classNames));
      var dividerClass = classNames("".concat(prefixCls, "-divider"), "".concat(prefixCls, "-divider-").concat(divider || 'solid'));

      if (loading) {
        children = /*#__PURE__*/React.createElement("div", {
          className: "".concat(prefixCls, "-loading-content")
        }, /*#__PURE__*/React.createElement("p", {
          className: "".concat(prefixCls, "-loading-block"),
          style: {
            width: '94%'
          }
        }), /*#__PURE__*/React.createElement("p", null, /*#__PURE__*/React.createElement("span", {
          className: "".concat(prefixCls, "-loading-block"),
          style: {
            width: '28%'
          }
        }), /*#__PURE__*/React.createElement("span", {
          className: "".concat(prefixCls, "-loading-block"),
          style: {
            width: '62%'
          }
        })), /*#__PURE__*/React.createElement("p", null, /*#__PURE__*/React.createElement("span", {
          className: "".concat(prefixCls, "-loading-block"),
          style: {
            width: '22%'
          }
        }), /*#__PURE__*/React.createElement("span", {
          className: "".concat(prefixCls, "-loading-block"),
          style: {
            width: '66%'
          }
        })), /*#__PURE__*/React.createElement("p", null, /*#__PURE__*/React.createElement("span", {
          className: "".concat(prefixCls, "-loading-block"),
          style: {
            width: '56%'
          }
        }), /*#__PURE__*/React.createElement("span", {
          className: "".concat(prefixCls, "-loading-block"),
          style: {
            width: '39%'
          }
        })), /*#__PURE__*/React.createElement("p", null, /*#__PURE__*/React.createElement("span", {
          className: "".concat(prefixCls, "-loading-block"),
          style: {
            width: '21%'
          }
        }), /*#__PURE__*/React.createElement("span", {
          className: "".concat(prefixCls, "-loading-block"),
          style: {
            width: '15%'
          }
        }), /*#__PURE__*/React.createElement("span", {
          className: "".concat(prefixCls, "-loading-block"),
          style: {
            width: '40%'
          }
        })));
      }

      var head;

      if (title || extra) {
        head = /*#__PURE__*/React.createElement("div", {
          className: "".concat(prefixCls, "-head")
        }, title ? /*#__PURE__*/React.createElement("div", {
          className: "".concat(prefixCls, "-head-title")
        }, title) : null, extra ? /*#__PURE__*/React.createElement("div", {
          className: "".concat(prefixCls, "-extra")
        }, extra) : null);
      }

      return /*#__PURE__*/React.createElement("div", _extends({}, others, {
        className: classNames(classString, head ? '' : "".concat(prefixCls, "-no-title")),
        ref: this.saveRef
      }), head, head ? /*#__PURE__*/React.createElement("div", {
        className: dividerClass
      }) : null, /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "-body"),
        style: bodyStyle
      }, children));
    }
  }]);

  return Card;
}(Component);

export { Card as default };
Card.Grid = Grid;

__decorate([throttleByAnimationFrameDecorator()], Card.prototype, "updateWiderPadding", null);
//# sourceMappingURL=index.js.map
