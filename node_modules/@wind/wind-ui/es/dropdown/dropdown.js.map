{"version":3,"sources":["dropdown/dropdown.jsx"],"names":["React","cloneElement","RcDropdown","classNames","Dropdown","props","placement","indexOf","children","prefixCls","overlay","dropdownTrigger","className","overlayProps","selectable","fixedModeOverlay","mode","getTransitionName","Component","defaultProps","mouseEnterDelay","mouseLeaveDelay"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,YAAhB,QAAoC,OAApC;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,UAAP,MAAuB,YAAvB;;IACqBC,Q;;;;;;;;;;;;;wCACG;AAAA,kCACW,KAAKC,KADhB,CACRC,SADQ;AAAA,UACRA,SADQ,sCACI,EADJ;;AAEhB,UAAIA,SAAS,CAACC,OAAV,CAAkB,KAAlB,KAA4B,CAAhC,EAAmC;AAC/B,eAAO,YAAP;AACH;;AACD,aAAO,UAAP;AACH,K,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;6BACS;AAAA,wBACoC,KAAKF,KADzC;AAAA,UACGG,QADH,eACGA,QADH;AAAA,UACaC,SADb,eACaA,SADb;AAAA,UACwBC,OADxB,eACwBA,OADxB;AAEL,UAAMC,eAAe,gBAAGV,YAAY,CAACO,QAAD,EAAW;AAC3CI,QAAAA,SAAS,EAAET,UAAU,CAACK,QAAQ,CAACH,KAAT,CAAeO,SAAhB,YAA8BH,SAA9B;AADsB,OAAX,CAApC,CAFK,CAKL;;AACA,UAAMI,YAAY,GAAGH,OAAO,IAAIA,OAAO,CAACL,KAAxC;AACA,UAAMS,UAAU,GAAID,YAAY,IAAI,gBAAgBA,YAAjC,GACbA,YAAY,CAACC,UADA,GACa,KADhC;AAEA,UAAMC,gBAAgB,gBAAGd,YAAY,CAACS,OAAD,EAAU;AAC3CM,QAAAA,IAAI,EAAE,UADqC;AAE3CF,QAAAA,UAAU,EAAVA;AAF2C,OAAV,CAArC;AAIA,0BAAQ,oBAAC,UAAD;AAAY,QAAA,cAAc,EAAE,KAAKG,iBAAL;AAA5B,SAA0D,KAAKZ,KAA/D;AAAsE,QAAA,OAAO,EAAEU;AAA/E,UACPJ,eADO,CAAR;AAGH;;;;EAhCiCX,KAAK,CAACkB,S;;SAAvBd,Q;AAkCrBA,QAAQ,CAACe,YAAT,GAAwB;AACpBV,EAAAA,SAAS,EAAE,YADS;AAEpBW,EAAAA,eAAe,EAAE,IAFG;AAGpBC,EAAAA,eAAe,EAAE,GAHG;AAIpBf,EAAAA,SAAS,EAAE;AAJS,CAAxB","sourcesContent":["import React, { cloneElement } from 'react';\nimport RcDropdown from 'rc-dropdown';\nimport classNames from 'classnames';\nexport default class Dropdown extends React.Component {\n    getTransitionName() {\n        const { placement = '' } = this.props;\n        if (placement.indexOf('top') >= 0) {\n            return 'slide-down';\n        }\n        return 'slide-up';\n    }\n    // componentDidMount() {\n    //   const { overlay } = this.props;\n    //   const overlayProps = (overlay as any).props as any;\n    //   warning(\n    //     !overlayProps.mode || overlayProps.mode === 'vertical',\n    //     `mode=\"${overlayProps.mode}\" is not supported for Dropdown\\'s Menu.`,\n    //   );\n    // }\n    render() {\n        const { children, prefixCls, overlay } = this.props;\n        const dropdownTrigger = cloneElement(children, {\n            className: classNames(children.props.className, `${prefixCls}-trigger`),\n        });\n        // menu cannot be selectable in dropdown defaultly\n        const overlayProps = overlay && overlay.props;\n        const selectable = (overlayProps && 'selectable' in overlayProps)\n            ? overlayProps.selectable : false;\n        const fixedModeOverlay = cloneElement(overlay, {\n            mode: 'vertical',\n            selectable,\n        });\n        return (<RcDropdown transitionName={this.getTransitionName()} {...this.props} overlay={fixedModeOverlay}>\n        {dropdownTrigger}\n      </RcDropdown>);\n    }\n}\nDropdown.defaultProps = {\n    prefixCls: 'w-dropdown',\n    mouseEnterDelay: 0.15,\n    mouseLeaveDelay: 0.1,\n    placement: 'bottomLeft',\n};\n"],"file":"dropdown.js"}