function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

import React, { Component, cloneElement } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import omit from 'omit.js';
import TextArea from './TextArea';

function fixControlledValue(value) {
  if (typeof value === 'undefined' || value === null) {
    return '';
  }

  return value;
}

var Input = /*#__PURE__*/function (_Component) {
  _inherits(Input, _Component);

  var _super = _createSuper(Input);

  function Input(props) {
    var _this;

    _classCallCheck(this, Input);

    _this = _super.call(this, props);

    _this.handleKeyDown = function (e) {
      var _this$props = _this.props,
          onPressEnter = _this$props.onPressEnter,
          onKeyDown = _this$props.onKeyDown;

      if (e.keyCode === 13 && onPressEnter) {
        onPressEnter(e);
      }

      if (onKeyDown) {
        onKeyDown(e);
      }
    };

    _this.handleInputFocus = function (e) {
      var onFocus = _this.props.onFocus;

      _this.setState({
        isFocus: true
      });

      if (onFocus) {
        onFocus(e);
      }
    };

    _this.handleInputBlur = function (e) {
      var onBlur = _this.props.onBlur;

      _this.setState({
        isFocus: false
      });

      if (onBlur) {
        onBlur(e);
      }
    };

    _this.state = {
      isFocus: false
    };
    return _this;
  }

  _createClass(Input, [{
    key: "focus",
    value: function focus() {
      this.refs.input.focus();
    }
  }, {
    key: "blur",
    value: function blur() {
      this.refs.input.blur();
    }
  }, {
    key: "getInputClassName",
    value: function getInputClassName() {
      var _classNames;

      var _this$props2 = this.props,
          prefixCls = _this$props2.prefixCls,
          size = _this$props2.size,
          disabled = _this$props2.disabled,
          theme = _this$props2.theme;
      return classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-sm"), size === 'small'), _defineProperty(_classNames, "".concat(prefixCls, "-lg"), size === 'large'), _defineProperty(_classNames, "".concat(prefixCls, "-disabled"), disabled), _defineProperty(_classNames, "".concat(prefixCls, "-").concat(theme), !!theme), _classNames));
    }
  }, {
    key: "renderLabeledInput",
    value: function renderLabeledInput(children) {
      var _classNames2;

      var props = this.props; // Not wrap when there is not addons

      if (!props.addonBefore && !props.addonAfter) {
        return children;
      }

      var sz = props.size === 'large' ? 'lg' : props.size === 'small' ? 'sm' : '';
      var wrapperClassName = "".concat(props.prefixCls, "-group");
      var addonClassName = classNames("".concat(wrapperClassName, "-addon"), sz ? "".concat(wrapperClassName, "-addon-").concat(sz) : '');
      var addonBefore = props.addonBefore ? /*#__PURE__*/React.createElement("span", {
        className: addonClassName
      }, props.addonBefore) : null;
      var addonAfter = props.addonAfter ? /*#__PURE__*/React.createElement("span", {
        className: addonClassName
      }, props.addonAfter) : null;
      var theme = props.theme;
      var className = classNames("".concat(props.prefixCls, "-wrapper"), (_classNames2 = {}, _defineProperty(_classNames2, wrapperClassName, addonBefore || addonAfter), _defineProperty(_classNames2, "".concat(props.prefixCls, "-wrapper-").concat(theme), !!theme), _classNames2)); // Need another wrapper for changing display:table to display:inline-block
      // and put style prop in wrapper

      if (addonBefore || addonAfter) {
        return /*#__PURE__*/React.createElement("span", {
          className: "".concat(props.prefixCls, "-group-wrapper"),
          style: props.style
        }, /*#__PURE__*/React.createElement("span", {
          className: className
        }, addonBefore, /*#__PURE__*/cloneElement(children, {
          style: null
        }), addonAfter));
      }

      return /*#__PURE__*/React.createElement("span", {
        className: className
      }, addonBefore, children, addonAfter);
    }
  }, {
    key: "renderLabeledIcon",
    value: function renderLabeledIcon(children) {
      var _classNames3;

      var props = this.props;
      var isFocus = this.state.isFocus;

      if (!('prefix' in props || 'suffix' in props)) {
        return children;
      }

      var prefix = props.prefix ? /*#__PURE__*/React.createElement("span", {
        className: "".concat(props.prefixCls, "-prefix")
      }, props.prefix) : null;
      var suffix = props.suffix ? /*#__PURE__*/React.createElement("span", {
        className: "".concat(props.prefixCls, "-suffix")
      }, props.suffix) : null;
      var sz = props.size === 'large' ? 'lg' : props.size === 'small' ? 'sm' : '';
      var theme = props.theme,
          disabled = props.disabled;
      return /*#__PURE__*/React.createElement("span", {
        className: classNames(props.className, "".concat(props.prefixCls, "-affix-wrapper"), (_classNames3 = {}, _defineProperty(_classNames3, "".concat(props.prefixCls, "-affix-wrapper-focused"), isFocus), _defineProperty(_classNames3, "".concat(props.prefixCls, "-affix-wrapper-").concat(sz), !!sz), _defineProperty(_classNames3, "".concat(props.prefixCls, "-affix-wrapper-").concat(theme), !!theme), _defineProperty(_classNames3, "".concat(props.prefixCls, "-affix-wrapper-disabled"), disabled), _classNames3)),
        style: props.style
      }, prefix, /*#__PURE__*/cloneElement(children, {
        style: null,
        className: this.getInputClassName(),
        onFocus: this.handleInputFocus,
        onBlur: this.handleInputBlur
      }), suffix);
    }
  }, {
    key: "renderInput",
    value: function renderInput() {
      var _this$props3 = this.props,
          value = _this$props3.value,
          className = _this$props3.className; // Fix https://fb.me/react-unknown-prop

      var otherProps = omit(this.props, ['prefixCls', 'onPressEnter', 'addonBefore', 'addonAfter', 'prefix', 'suffix', 'theme']);

      if ('value' in this.props) {
        otherProps.value = fixControlledValue(value); // Input elements must be either controlled or uncontrolled,
        // specify either the value prop, or the defaultValue prop, but not both.

        delete otherProps.defaultValue;
      }

      return this.renderLabeledIcon( /*#__PURE__*/React.createElement("input", _extends({}, otherProps, {
        className: classNames(this.getInputClassName(), className),
        onKeyDown: this.handleKeyDown,
        ref: "input"
      })));
    }
  }, {
    key: "render",
    value: function render() {
      if (this.props.type === 'textarea') {
        return /*#__PURE__*/React.createElement(TextArea, _extends({}, this.props, {
          ref: "input"
        }));
      }

      return this.renderLabeledInput(this.renderInput());
    }
  }]);

  return Input;
}(Component);

export { Input as default };
Input.defaultProps = {
  prefixCls: 'w-input',
  type: 'text',
  disabled: false
};
Input.propTypes = {
  type: PropTypes.string,
  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  size: PropTypes.oneOf(['small', 'default', 'large']),
  theme: PropTypes.oneOf(['light', 'dark']),
  disabled: PropTypes.bool,
  value: PropTypes.any,
  defaultValue: PropTypes.any,
  className: PropTypes.string,
  addonBefore: PropTypes.node,
  addonAfter: PropTypes.node,
  prefixCls: PropTypes.string,
  autosize: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),
  onPressEnter: PropTypes.func,
  onKeyDown: PropTypes.func,
  onFocus: PropTypes.func,
  onBlur: PropTypes.func,
  prefix: PropTypes.node,
  suffix: PropTypes.node
};
//# sourceMappingURL=Input.js.map
