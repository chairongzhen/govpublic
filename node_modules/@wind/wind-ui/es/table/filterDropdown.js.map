{"version":3,"sources":["table/filterDropdown.jsx"],"names":["React","ReactDOM","Menu","SubMenu","Item","MenuItem","closest","classNames","Dropdown","Checkbox","Radio","FilterDropdownMenuWrapper","placements","FilterO","FilterMenu","props","setSelectedKeys","selectedKeys","setState","handleClearFilters","handleConfirm","setVisible","confirmFilter","onVisibleChange","visible","handleMenuItemClick","info","keyPath","length","keyPathOfSelectedItem","state","indexOf","key","renderFilterIcon","column","locale","prefixCls","filterIcon","dropdownSelectedClass","cloneElement","title","filterTitle","className","e","stopPropagation","filterDropdownVisible","rootNode","findDOMNode","filterBelongToScrollBody","fixed","neverShown","nextProps","newState","Object","keys","onFilterDropdownVisibleChange","item","multiple","filterMultiple","input","value","toString","text","filters","some","children","items","map","containSelected","subMenuCls","dropdownPrefixCls","renderMenus","renderMenuItem","getPopupContainer","dropdownMenuClass","hasSubMenu","menus","filterDropdown","filterConfirm","filterReset","Component","defaultProps","handleFilter"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Menu, { SubMenu, Item as MenuItem } from 'rc-menu';\nimport closest from 'dom-closest';\nimport classNames from 'classnames';\nimport Dropdown from '../dropdown';\nimport Checkbox from '../checkbox';\nimport Radio from '../radio';\nimport FilterDropdownMenuWrapper from './FilterDropdownMenuWrapper';\nimport placements from '../menu/placements';\nimport FilterO from '@wind/icons/lib/icons/FilterO';\nexport default class FilterMenu extends React.Component {\n    constructor(props) {\n        super(props);\n        this.setSelectedKeys = ({ selectedKeys }) => {\n            this.setState({ selectedKeys });\n        };\n        this.handleClearFilters = () => {\n            this.setState({\n                selectedKeys: [],\n            }, this.handleConfirm);\n        };\n        this.handleConfirm = () => {\n            this.setVisible(false);\n            this.confirmFilter();\n        };\n        this.onVisibleChange = (visible) => {\n            this.setVisible(visible);\n            if (!visible) {\n                this.confirmFilter();\n            }\n        };\n        this.handleMenuItemClick = (info) => {\n            if (info.keyPath.length <= 1) {\n                return;\n            }\n            const keyPathOfSelectedItem = this.state.keyPathOfSelectedItem;\n            if (this.state.selectedKeys.indexOf(info.key) >= 0) {\n                // deselect SubMenu child\n                delete keyPathOfSelectedItem[info.key];\n            }\n            else {\n                // select SubMenu child\n                keyPathOfSelectedItem[info.key] = info.keyPath;\n            }\n            this.setState({ keyPathOfSelectedItem });\n        };\n        this.renderFilterIcon = () => {\n            const { column, locale, prefixCls } = this.props;\n            const filterIcon = column.filterIcon;\n            const dropdownSelectedClass = classNames(`${prefixCls}-icon`, {\n                [`${prefixCls}-selected`]: this.props.selectedKeys.length > 0\n            });\n            return filterIcon ? React.cloneElement(filterIcon, {\n                title: locale.filterTitle,\n                className: classNames(filterIcon.className, dropdownSelectedClass),\n            }) : <FilterO onClick={(e) => {\n                e.stopPropagation();\n                // console.log('filterIcon clicked');\n            }} title={locale.filterTitle} className={dropdownSelectedClass}/>;\n        };\n        const visible = ('filterDropdownVisible' in props.column) ?\n            props.column.filterDropdownVisible : false;\n        this.state = {\n            selectedKeys: props.selectedKeys,\n            keyPathOfSelectedItem: {},\n            visible,\n        };\n    }\n    componentDidMount() {\n        const { column } = this.props;\n        const rootNode = ReactDOM.findDOMNode(this);\n        const filterBelongToScrollBody = !!closest(rootNode, `.w-table-scroll`);\n        if (filterBelongToScrollBody && column.fixed) {\n            // When fixed column have filters, there will be two dropdown menus\n            // Filter dropdown menu inside scroll body should never be shown\n            // To fix https://github.com/ant-design/ant-design/issues/5010\n            this.neverShown = true;\n        }\n    }\n    componentWillReceiveProps(nextProps) {\n        const { column } = nextProps;\n        const newState = {};\n        if ('selectedKeys' in nextProps) {\n            newState.selectedKeys = nextProps.selectedKeys;\n        }\n        if ('filterDropdownVisible' in column) {\n            newState.visible = column.filterDropdownVisible;\n        }\n        if (Object.keys(newState).length > 0) {\n            this.setState(newState);\n        }\n    }\n    setVisible(visible) {\n        const { column } = this.props;\n        if (!('filterDropdownVisible' in column)) {\n            this.setState({ visible });\n        }\n        if (column.onFilterDropdownVisibleChange) {\n            column.onFilterDropdownVisibleChange(visible);\n        }\n    }\n    confirmFilter() {\n        if (this.state.selectedKeys !== this.props.selectedKeys) {\n            this.props.confirmFilter(this.props.column, this.state.selectedKeys);\n        }\n    }\n    renderMenuItem(item) {\n        const { column } = this.props;\n        const multiple = ('filterMultiple' in column) ? column.filterMultiple : true;\n        const input = multiple ? (<Checkbox checked={this.state.selectedKeys.indexOf(item.value.toString()) >= 0}/>) : (<Radio checked={this.state.selectedKeys.indexOf(item.value.toString()) >= 0}/>);\n        return (<MenuItem key={item.value}>\n        {input}\n        <span>{item.text}</span>\n      </MenuItem>);\n    }\n    hasSubMenu() {\n        const { column: { filters = [] } } = this.props;\n        return filters.some(item => !!(item.children && item.children.length > 0));\n    }\n    renderMenus(items) {\n        return items.map(item => {\n            if (item.children && item.children.length > 0) {\n                const { keyPathOfSelectedItem } = this.state;\n                const containSelected = Object.keys(keyPathOfSelectedItem).some(key => keyPathOfSelectedItem[key].indexOf(item.value) >= 0);\n                const subMenuCls = containSelected ? `${this.props.dropdownPrefixCls}-submenu-contain-selected` : '';\n                return (<SubMenu title={item.text} className={subMenuCls} key={item.value.toString()}>\n            {this.renderMenus(item.children)}\n          </SubMenu>);\n            }\n            return this.renderMenuItem(item);\n        });\n    }\n    render() {\n        const { column, locale, prefixCls, dropdownPrefixCls, getPopupContainer } = this.props;\n        // default multiple selection in filter dropdown\n        const multiple = ('filterMultiple' in column) ? column.filterMultiple : true;\n        const dropdownMenuClass = classNames({\n            [`${dropdownPrefixCls}-menu-without-submenu`]: !this.hasSubMenu(),\n        });\n        const menus = column.filterDropdown ? (<FilterDropdownMenuWrapper>\n        {column.filterDropdown}\n      </FilterDropdownMenuWrapper>) : (<FilterDropdownMenuWrapper className={`${prefixCls}-dropdown`}>\n        <Menu multiple={multiple} onClick={this.handleMenuItemClick} prefixCls={`${dropdownPrefixCls}-menu`} className={dropdownMenuClass} onSelect={this.setSelectedKeys} onDeselect={this.setSelectedKeys} selectedKeys={this.state.selectedKeys} builtinPlacements={placements}>\n          {this.renderMenus(column.filters)}\n        </Menu>\n        <div className={`${prefixCls}-dropdown-btns`}>\n          <a className={`${prefixCls}-dropdown-link confirm`} onClick={this.handleConfirm}>\n            {locale.filterConfirm}\n          </a>\n          <a className={`${prefixCls}-dropdown-link clear`} onClick={this.handleClearFilters}>\n            {locale.filterReset}\n          </a>\n        </div>\n      </FilterDropdownMenuWrapper>);\n        return (<Dropdown trigger={['click']} overlay={menus} visible={this.neverShown ? false : this.state.visible} onVisibleChange={this.onVisibleChange} getPopupContainer={getPopupContainer}>\n        {this.renderFilterIcon()}\n      </Dropdown>);\n    }\n}\nFilterMenu.defaultProps = {\n    handleFilter() { },\n    column: {},\n};\n"],"file":"filterDropdown.js"}