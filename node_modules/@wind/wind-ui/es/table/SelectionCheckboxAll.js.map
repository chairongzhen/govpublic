{"version":3,"sources":["table/SelectionCheckboxAll.jsx"],"names":["React","DownO","Checkbox","Dropdown","Menu","classNames","SelectionCheckboxAll","props","handleSelectAllChagne","e","checked","target","onSelect","defaultSelections","key","text","locale","selectAll","selectInvert","state","getCheckState","indeterminate","getIndeterminateState","subscribe","nextProps","setCheckState","unsubscribe","store","data","type","byDefaultChecked","getCheckboxPropsByItem","getRecordKey","item","i","defaultChecked","getState","selectedRowKeys","indexOf","setState","length","selectionDirty","checkSelection","selections","map","selection","index","disabled","prefixCls","getPopupContainer","selectionPrefixCls","customSelections","newSelections","Array","isArray","concat","menu","renderMenus","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport DownO from '@wind/icons/lib/icons/DownO';\nimport Checkbox from '../checkbox';\nimport Dropdown from '../dropdown';\nimport Menu from '../menu';\nimport classNames from 'classnames';\nexport default class SelectionCheckboxAll extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleSelectAllChagne = (e) => {\n            let checked = e.target.checked;\n            this.props.onSelect(checked ? 'all' : 'removeAll', 0, null);\n        };\n        this.defaultSelections = [{\n                key: 'all',\n                text: props.locale.selectAll,\n                onSelect: () => { },\n            }, {\n                key: 'invert',\n                text: props.locale.selectInvert,\n                onSelect: () => { },\n            }];\n        this.state = {\n            checked: this.getCheckState(props),\n            indeterminate: this.getIndeterminateState(props),\n        };\n    }\n    componentDidMount() {\n        this.subscribe();\n    }\n    componentWillReceiveProps(nextProps) {\n        this.setCheckState(nextProps);\n    }\n    componentWillUnmount() {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n        }\n    }\n    subscribe() {\n        const { store } = this.props;\n        this.unsubscribe = store.subscribe(() => {\n            this.setCheckState(this.props);\n        });\n    }\n    checkSelection(data, type, byDefaultChecked) {\n        const { store, getCheckboxPropsByItem, getRecordKey } = this.props;\n        // type should be 'every' | 'some'\n        if (type === 'every' || type === 'some') {\n            return (byDefaultChecked\n                ? data[type]((item, i) => getCheckboxPropsByItem(item, i).defaultChecked)\n                : data[type]((item, i) => store.getState().selectedRowKeys.indexOf(getRecordKey(item, i)) >= 0));\n        }\n        return false;\n    }\n    setCheckState(props) {\n        const checked = this.getCheckState(props);\n        const indeterminate = this.getIndeterminateState(props);\n        if (checked !== this.state.checked) {\n            this.setState({ checked });\n        }\n        if (indeterminate !== this.state.indeterminate) {\n            this.setState({ indeterminate });\n        }\n    }\n    getCheckState(props) {\n        const { store, data } = props;\n        let checked;\n        if (!data.length) {\n            checked = false;\n        }\n        else {\n            checked = store.getState().selectionDirty\n                ? this.checkSelection(data, 'every', false)\n                : (this.checkSelection(data, 'every', false) ||\n                    this.checkSelection(data, 'every', true));\n        }\n        return checked;\n    }\n    getIndeterminateState(props) {\n        const { store, data } = props;\n        let indeterminate;\n        if (!data.length) {\n            indeterminate = false;\n        }\n        else {\n            indeterminate = store.getState().selectionDirty\n                ? (this.checkSelection(data, 'some', false) &&\n                    !this.checkSelection(data, 'every', false))\n                : ((this.checkSelection(data, 'some', false) &&\n                    !this.checkSelection(data, 'every', false)) ||\n                    (this.checkSelection(data, 'some', true) &&\n                        !this.checkSelection(data, 'every', true)));\n        }\n        return indeterminate;\n    }\n    renderMenus(selections) {\n        return selections.map((selection, index) => {\n            return (<Menu.Item key={selection.key || index}>\r\n          <div onClick={() => { this.props.onSelect(selection.key, index, selection.onSelect); }}>\r\n            {selection.text}\r\n          </div>\r\n        </Menu.Item>);\n        });\n    }\n    render() {\n        const { disabled, prefixCls, selections, getPopupContainer } = this.props;\n        const { checked, indeterminate } = this.state;\n        let selectionPrefixCls = `${prefixCls}-selection`;\n        let customSelections = null;\n        if (selections) {\n            let newSelections = Array.isArray(selections) ? this.defaultSelections.concat(selections)\n                : this.defaultSelections;\n            let menu = (<Menu className={`${selectionPrefixCls}-menu`} selectedKeys={[]}>\r\n          {this.renderMenus(newSelections)}\r\n        </Menu>);\n            customSelections = (<Dropdown overlay={menu} getPopupContainer={getPopupContainer}>\r\n          <div className={`${selectionPrefixCls}-down`}>\r\n            <DownO />\r\n          </div>\r\n        </Dropdown>);\n        }\n        return (<div className={selectionPrefixCls}>\r\n        <Checkbox className={classNames({ [`${selectionPrefixCls}-select-all-custom`]: customSelections })} checked={checked} indeterminate={indeterminate} disabled={disabled} onChange={this.handleSelectAllChagne}/>\r\n        {customSelections}\r\n      </div>);\n    }\n}\n"],"file":"SelectionCheckboxAll.js"}