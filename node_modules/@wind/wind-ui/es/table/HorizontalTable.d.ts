import React from 'react';
import { SpinProps } from '../spin';
import { TableContext } from './Table';
export interface RowItemProps {
    title?: React.ReactNode;
    key?: string;
    dataIndex: string;
    render?: (text: any, record: Object, index: number) => React.ReactNode;
    colSpan?: number;
    titleWidth?: string | number;
    contentWidth?: string | number;
    className?: string;
    contentAlign?: 'left' | 'center' | 'right';
    titleAlign?: 'left' | 'center' | 'right';
}
export interface HorizontalTableProps {
    title?: React.ReactNode;
    prefixCls?: string;
    size?: 'default' | 'large' | 'middle' | 'small';
    dataSource?: Object;
    rows?: RowItemProps[][];
    loading?: boolean | SpinProps;
    locale?: Object;
    bordered?: 'default' | 'dotted' | 'solid';
    className?: string;
    style?: React.CSSProperties;
    striped?: boolean;
}
export default class HorizontalTable extends React.Component<HorizontalTableProps, any> {
    static defaultProps: {
        dataSource: {};
        prefixCls: string;
        size: string;
        bordered: string;
        loading: boolean;
        locale: {};
        striped: boolean;
    };
    static contextTypes: {
        antLocale: any;
    };
    context: TableContext;
    constructor(props: any);
    getLocale(): {
        emptyText: JSX.Element;
    } | {
        constructor: Function;
        toString(): string;
        toLocaleString(): string;
        valueOf(): Object;
        hasOwnProperty(v: string | number | symbol): boolean;
        isPrototypeOf(v: Object): boolean;
        propertyIsEnumerable(v: string | number | symbol): boolean;
        emptyText: JSX.Element;
    };
    generateTable: () => JSX.Element;
    render(): JSX.Element;
}
