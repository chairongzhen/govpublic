import React from 'react';
export interface TreeNodeProps {
    className?: string;
    checkable?: boolean;
    disabled?: boolean;
    disableCheckbox?: boolean;
    title?: string | React.ReactNode;
    key?: string;
    eventKey?: string;
    isLeaf?: boolean;
    checked?: boolean;
    expanded?: boolean;
    loading?: boolean;
    selected?: boolean;
    selectable?: boolean;
    icon?: ((treeNode: TreeNodeAttribute) => React.ReactNode) | React.ReactNode;
    children?: React.ReactNode;
    [customProp: string]: any;
}
export declare class TreeNode extends React.Component<TreeNodeProps, {}> {
    render(): JSX.Element;
}
export interface TreeNodeEvent {
    event: 'check' | 'select';
    node: TreeNode;
    checked?: boolean;
    checkedNodes?: Array<TreeNode>;
    selected?: boolean;
    selectedNodes?: Array<TreeNode>;
}
export interface TreeNodeAttribute {
    eventKey: string;
    prefixCls: string;
    className: string;
    expanded: boolean;
    selected: boolean;
    checked: boolean;
    halfChecked: boolean;
    children: React.ReactNode;
    title: React.ReactNode;
    pos: string;
    dragOver: boolean;
    dragOverGapTop: boolean;
    dragOverGapBottom: boolean;
    isLeaf: boolean;
    selectable: boolean;
    disabled: boolean;
    disableCheckbox: boolean;
}
export interface TreeNodeMouseEvent {
    node: TreeNode;
    event: React.MouseEventHandler<any>;
}
export interface TreeProps {
    showLine?: boolean;
    className?: string;
    theme?: 'light' | 'dark';
    /** 是否支持多选 */
    multiple?: boolean;
    /** 是否自动展开父节点 */
    autoExpandParent?: boolean;
    /** checkable状态下节点选择完全受控（父子节点选中状态不再关联）*/
    checkStrictly?: boolean;
    /** 是否支持选中 */
    checkable?: boolean;
    /** 默认展开所有树节点 */
    defaultExpandAll?: boolean;
    /** 默认展开指定的树节点 */
    defaultExpandedKeys?: Array<string>;
    /** （受控）展开指定的树节点 */
    expandedKeys?: Array<string>;
    /** （受控）选中复选框的树节点 */
    checkedKeys?: Array<string> | {
        checked: Array<string>;
        halfChecked: Array<string>;
    };
    /** 默认选中复选框的树节点 */
    defaultCheckedKeys?: Array<string>;
    /** （受控）设置选中的树节点 */
    selectedKeys?: Array<string>;
    /** 默认选中的树节点 */
    defaultSelectedKeys?: Array<string>;
    /** 展开/收起节点时触发 */
    onExpand?: (expandedKeys: Array<string>, info: {
        node: TreeNode;
        expanded: boolean;
    }) => void | PromiseLike<any>;
    /** 点击复选框触发 */
    onCheck?: (checkedKeys: Array<string>, e: TreeNodeEvent) => void;
    /** 点击树节点触发 */
    onSelect?: (selectedKeys: Array<string>, e: TreeNodeEvent) => void;
    /** filter some AntTreeNodes as you need. it should return true */
    filterAntTreeNode?: (node: TreeNode) => boolean;
    /** 异步加载数据 */
    loadData?: (node: TreeNode) => PromiseLike<any>;
    /** 响应右键点击 */
    onRightClick?: (options: TreeNodeMouseEvent) => void;
    /** 设置节点可拖拽（IE>8）*/
    draggable?: boolean;
    /** 开始拖拽时调用 */
    onDragStart?: (options: TreeNodeMouseEvent) => void;
    /** dragenter 触发时调用 */
    onDragEnter?: (options: TreeNodeMouseEvent) => void;
    /** dragover 触发时调用 */
    onDragOver?: (options: TreeNodeMouseEvent) => void;
    /** dragleave 触发时调用 */
    onDragLeave?: (options: TreeNodeMouseEvent) => void;
    /** drop 触发时调用 */
    onDrop?: (options: TreeNodeMouseEvent) => void;
    style?: React.CSSProperties;
    prefixCls: string;
    filterTreeNode?: (node: TreeNode) => boolean;
    switcherIcon?: React.ReactElement<any>;
    isLeaf: boolean;
    expanded: boolean;
    loading: boolean;
}
export declare function renderSwitcherIcon(prefixCls: string | undefined, switcherIcon: React.ReactNode | null | undefined, showLine: boolean | undefined, { isLeaf, expanded, loading }: TreeNodeProps): {} | null;
export default class Tree extends React.Component<TreeProps, any> {
    static TreeNode: any;
    static defaultProps: {
        prefixCls: string;
        checkable: boolean;
        showIcon: boolean;
        openAnimation: {
            enter(node: any, done: any): any;
            leave(node: any, done: any): any;
            appear(node: any, done: any): any;
        };
    };
    render(): JSX.Element;
}
