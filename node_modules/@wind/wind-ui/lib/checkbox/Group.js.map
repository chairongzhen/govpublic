{"version":3,"sources":["checkbox/Group.jsx"],"names":["CheckboxGroup","props","toggleOption","option","optionIndex","state","value","indexOf","push","splice","setState","onChange","defaultValue","checkboxGroup","disabled","name","nextProps","nextState","options","map","label","prefixCls","className","children","length","getOptions","classString","React","Component","defaultProps","propTypes","PropTypes","array","isRequired","func","childContextTypes","any"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport shallowEqual from 'shallowequal';\nimport Checkbox from './Checkbox';\nexport default class CheckboxGroup extends React.Component {\n    constructor(props) {\n        super(props);\n        this.toggleOption = (option) => {\n            const optionIndex = this.state.value.indexOf(option.value);\n            const value = [...this.state.value];\n            if (optionIndex === -1) {\n                value.push(option.value);\n            }\n            else {\n                value.splice(optionIndex, 1);\n            }\n            if (!('value' in this.props)) {\n                this.setState({ value });\n            }\n            const onChange = this.props.onChange;\n            if (onChange) {\n                onChange(value);\n            }\n        };\n        this.state = {\n            value: props.value || props.defaultValue || [],\n        };\n    }\n    getChildContext() {\n        return {\n            checkboxGroup: {\n                toggleOption: this.toggleOption,\n                value: this.state.value,\n                disabled: this.props.disabled,\n                name: this.props.name,\n            },\n        };\n    }\n    componentWillReceiveProps(nextProps) {\n        if ('value' in nextProps) {\n            this.setState({\n                value: nextProps.value || [],\n            });\n        }\n    }\n    shouldComponentUpdate(nextProps, nextState) {\n        return !shallowEqual(this.props, nextProps) ||\n            !shallowEqual(this.state, nextState);\n    }\n    getOptions() {\n        const { options } = this.props;\n        // https://github.com/Microsoft/TypeScript/issues/7960\n        return options.map(option => {\n            if (typeof option === 'string') {\n                return {\n                    label: option,\n                    value: option,\n                };\n            }\n            return option;\n        });\n    }\n    render() {\n        const { props, state } = this;\n        const { prefixCls, className, options } = props;\n        let children = props.children;\n        if (options && options.length > 0) {\n            children = this.getOptions().map(option => (<Checkbox key={option.value} disabled={'disabled' in option ? option.disabled : props.disabled} value={option.value} checked={state.value.indexOf(option.value) !== -1} onChange={() => this.toggleOption(option)} className={`${prefixCls}-item`}>\n          {option.label}\n        </Checkbox>));\n        }\n        const classString = classNames(prefixCls, className);\n        return (<div className={classString}>\n        {children}\n      </div>);\n    }\n}\nCheckboxGroup.defaultProps = {\n    options: [],\n    prefixCls: 'w-checkbox-group',\n};\nCheckboxGroup.propTypes = {\n    defaultValue: PropTypes.array,\n    value: PropTypes.array,\n    options: PropTypes.array.isRequired,\n    onChange: PropTypes.func,\n};\nCheckboxGroup.childContextTypes = {\n    checkboxGroup: PropTypes.any,\n};\n"],"file":"Group.js"}