"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _PureRenderMixin = _interopRequireDefault(require("rc-util/lib/PureRenderMixin"));

var _CloseCircleF = _interopRequireDefault(require("@wind/icons/lib/icons/CloseCircleF"));

var _ExclamationCircleF = _interopRequireDefault(require("@wind/icons/lib/icons/ExclamationCircleF"));

var _LoadingO = _interopRequireDefault(require("@wind/icons/lib/icons/LoadingO"));

var _CheckCircleF = _interopRequireDefault(require("@wind/icons/lib/icons/CheckCircleF"));

var _row = _interopRequireDefault(require("../grid/row"));

var _col = _interopRequireDefault(require("../grid/col"));

var _constants = require("./constants");

var _warning = _interopRequireDefault(require("../_util/warning"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var FormItem = /*#__PURE__*/function (_React$Component) {
  _inherits(FormItem, _React$Component);

  var _super = _createSuper(FormItem);

  function FormItem() {
    _classCallCheck(this, FormItem);

    return _super.apply(this, arguments);
  }

  _createClass(FormItem, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      (0, _warning["default"])(this.getControls(this.props.children, true).length <= 1, '`Form.Item` cannot generate `validateStatus` and `help` automatically, ' + 'while there are more than one `getFieldDecorator` in it.');
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _PureRenderMixin["default"].shouldComponentUpdate.apply(this, args);
    }
  }, {
    key: "getHelpMsg",
    value: function getHelpMsg() {
      var context = this.context;
      var props = this.props;

      if (props.help === undefined && context.form) {
        return this.getId() ? (context.form.getFieldError(this.getId()) || []).join(', ') : '';
      }

      return props.help;
    }
  }, {
    key: "getControls",
    value: function getControls(children, recursively) {
      var controls = [];

      var childrenArray = _react["default"].Children.toArray(children);

      for (var i = 0; i < childrenArray.length; i++) {
        if (!recursively && controls.length > 0) {
          break;
        }

        var child = childrenArray[i];

        if (child.type === FormItem) {
          continue;
        }

        if (!child.props) {
          continue;
        }

        if (_constants.FIELD_META_PROP in child.props) {
          controls.push(child);
        } else if (child.props.children) {
          controls = controls.concat(this.getControls(child.props.children, recursively));
        }
      }

      return controls;
    }
  }, {
    key: "getOnlyControl",
    value: function getOnlyControl() {
      var child = this.getControls(this.props.children, false)[0];
      return child !== undefined ? child : null;
    }
  }, {
    key: "getChildProp",
    value: function getChildProp(prop) {
      var child = this.getOnlyControl();
      return child && child.props && child.props[prop];
    }
  }, {
    key: "getId",
    value: function getId() {
      return this.getChildProp('id');
    }
  }, {
    key: "getMeta",
    value: function getMeta() {
      return this.getChildProp(_constants.FIELD_META_PROP);
    }
  }, {
    key: "renderHelp",
    value: function renderHelp() {
      var prefixCls = this.props.prefixCls;
      var help = this.getHelpMsg();
      return help ? /*#__PURE__*/_react["default"].createElement("div", {
        className: "".concat(prefixCls, "-explain"),
        key: "help"
      }, help) : null;
    }
  }, {
    key: "renderExtra",
    value: function renderExtra() {
      var _this$props = this.props,
          prefixCls = _this$props.prefixCls,
          extra = _this$props.extra;
      return extra ? /*#__PURE__*/_react["default"].createElement("div", {
        className: "".concat(prefixCls, "-extra")
      }, extra) : null;
    }
  }, {
    key: "getValidateStatus",
    value: function getValidateStatus() {
      var _this$context$form = this.context.form,
          isFieldValidating = _this$context$form.isFieldValidating,
          getFieldError = _this$context$form.getFieldError,
          getFieldValue = _this$context$form.getFieldValue;
      var fieldId = this.getId();

      if (!fieldId) {
        return '';
      }

      if (isFieldValidating(fieldId)) {
        return 'validating';
      }

      if (!!getFieldError(fieldId)) {
        return 'error';
      }

      var fieldValue = getFieldValue(fieldId);

      if (fieldValue !== undefined && fieldValue !== null && fieldValue !== '') {
        return 'success';
      }

      return '';
    }
  }, {
    key: "renderValidateWrapper",
    value: function renderValidateWrapper(c1, c2, c3) {
      var classes = '';
      var c4;
      var form = this.context.form;
      var props = this.props;
      var validateStatus = props.validateStatus === undefined && form ? this.getValidateStatus() : props.validateStatus;
      var hasFeedback = props.hasFeedback,
          prefixCls = props.prefixCls;

      if (validateStatus) {
        classes = (0, _classnames["default"])({
          'has-feedback': hasFeedback,
          'has-success': validateStatus === 'success',
          'has-warning': validateStatus === 'warning',
          'has-error': validateStatus === 'error',
          'is-validating': validateStatus === 'validating'
        });

        if (hasFeedback) {
          switch (validateStatus) {
            case 'success':
              c4 = /*#__PURE__*/_react["default"].createElement(_CheckCircleF["default"], null);
              break;

            case 'warning':
              c4 = /*#__PURE__*/_react["default"].createElement(_ExclamationCircleF["default"], null);
              break;

            case 'error':
              c4 = /*#__PURE__*/_react["default"].createElement(_CloseCircleF["default"], null);
              break;

            case 'validating':
              c4 = /*#__PURE__*/_react["default"].createElement(_LoadingO["default"], null);
              break;

            default:
              break;
          }
        }
      }

      return /*#__PURE__*/_react["default"].createElement("div", {
        className: "".concat(prefixCls, "-item-control ").concat(classes)
      }, c1, c2, c3, c4 ? /*#__PURE__*/_react["default"].createElement("span", {
        className: "".concat(prefixCls, "-item-feedback-icon ").concat(classes)
      }, c4) : null);
    }
  }, {
    key: "renderWrapper",
    value: function renderWrapper(children) {
      var _this$props2 = this.props,
          prefixCls = _this$props2.prefixCls,
          wrapperCol = _this$props2.wrapperCol;
      var className = (0, _classnames["default"])("".concat(prefixCls, "-item-control-wrapper"), wrapperCol && wrapperCol.className);
      return /*#__PURE__*/_react["default"].createElement(_col["default"], _extends({}, wrapperCol, {
        className: className,
        key: "wrapper"
      }), children);
    }
  }, {
    key: "isRequired",
    value: function isRequired() {
      var required = this.props.required;

      if (required !== undefined) {
        return required;
      }

      if (this.context.form) {
        var meta = this.getMeta() || {};
        var validate = meta.validate || [];
        return validate.filter(function (item) {
          return !!item.rules;
        }).some(function (item) {
          return item.rules.some(function (rule) {
            return rule.required;
          });
        });
      }

      return false;
    }
  }, {
    key: "renderLabel",
    value: function renderLabel() {
      var _this$props3 = this.props,
          prefixCls = _this$props3.prefixCls,
          label = _this$props3.label,
          labelCol = _this$props3.labelCol,
          colon = _this$props3.colon,
          id = _this$props3.id;
      var context = this.context;
      var required = this.isRequired();
      var labelColClassName = (0, _classnames["default"])("".concat(prefixCls, "-item-label"), labelCol && labelCol.className);
      var labelClassName = (0, _classnames["default"])(_defineProperty({}, "".concat(prefixCls, "-item-required"), required));
      var labelChildren = label; // Keep label is original where there should have no colon

      var haveColon = colon && !context.vertical; // Remove duplicated user input colon

      if (haveColon && typeof label === 'string' && label.trim() !== '') {
        labelChildren = label.replace(/[：|:]\s*$/, '');
      }

      return label ? /*#__PURE__*/_react["default"].createElement(_col["default"], _extends({}, labelCol, {
        className: labelColClassName,
        key: "label"
      }), /*#__PURE__*/_react["default"].createElement("label", {
        htmlFor: id || this.getId(),
        className: labelClassName,
        title: typeof label === 'string' ? label : ''
      }, labelChildren)) : null;
    }
  }, {
    key: "renderChildren",
    value: function renderChildren() {
      var props = this.props;

      var children = _react["default"].Children.map(props.children, function (child) {
        if (child && typeof child.type === 'function' && !child.props.size) {
          return /*#__PURE__*/_react["default"].cloneElement(child, {
            /*size: 'large'*/
          }); //默认不使用大尺寸
        }

        return child;
      });

      return [this.renderLabel(), this.renderWrapper(this.renderValidateWrapper(children, this.renderHelp(), this.renderExtra()))];
    }
  }, {
    key: "renderFormItem",
    value: function renderFormItem(children) {
      var _itemClassName;

      var props = this.props;
      var prefixCls = props.prefixCls;
      var style = props.style;
      var itemClassName = (_itemClassName = {}, _defineProperty(_itemClassName, "".concat(prefixCls, "-item"), true), _defineProperty(_itemClassName, "".concat(prefixCls, "-item-with-help"), !!this.getHelpMsg()), _defineProperty(_itemClassName, "".concat(prefixCls, "-item-no-colon"), !props.colon), _defineProperty(_itemClassName, "".concat(props.className), !!props.className), _itemClassName);
      return /*#__PURE__*/_react["default"].createElement(_row["default"], {
        className: (0, _classnames["default"])(itemClassName),
        style: style
      }, children);
    }
  }, {
    key: "render",
    value: function render() {
      var children = this.renderChildren();
      return this.renderFormItem(children);
    }
  }]);

  return FormItem;
}(_react["default"].Component);

exports["default"] = FormItem;
FormItem.defaultProps = {
  hasFeedback: false,
  prefixCls: 'w-form',
  colon: true
};
FormItem.propTypes = {
  prefixCls: _propTypes["default"].string,
  label: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),
  labelCol: _propTypes["default"].object,
  help: _propTypes["default"].oneOfType([_propTypes["default"].node, _propTypes["default"].bool]),
  validateStatus: _propTypes["default"].oneOf(['', 'success', 'warning', 'error', 'validating']),
  hasFeedback: _propTypes["default"].bool,
  wrapperCol: _propTypes["default"].object,
  className: _propTypes["default"].string,
  id: _propTypes["default"].string,
  children: _propTypes["default"].node,
  colon: _propTypes["default"].bool
};
FormItem.contextTypes = {
  form: _propTypes["default"].object,
  vertical: _propTypes["default"].bool
};
//# sourceMappingURL=FormItem.js.map
