"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactDom = require("react-dom");

var _rcTable = _interopRequireWildcard(require("rc-table"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _FrownO = _interopRequireDefault(require("@wind/icons/lib/icons/FrownO"));

var _ArrowUpO = _interopRequireDefault(require("@wind/icons/lib/icons/ArrowUpO"));

var _ArrowDownO = _interopRequireDefault(require("@wind/icons/lib/icons/ArrowDownO"));

var _RightO = _interopRequireDefault(require("@wind/icons/lib/icons/RightO"));

var _pagination = _interopRequireDefault(require("../pagination"));

var _spin = _interopRequireDefault(require("../spin"));

var _warning = _interopRequireDefault(require("../_util/warning"));

var _filterDropdown = _interopRequireDefault(require("./filterDropdown"));

var _createStore = _interopRequireDefault(require("./createStore"));

var _SelectionBox = _interopRequireDefault(require("./SelectionBox"));

var _SelectionCheckboxAll = _interopRequireDefault(require("./SelectionCheckboxAll"));

var _Column = _interopRequireDefault(require("./Column"));

var _ColumnGroup = _interopRequireDefault(require("./ColumnGroup"));

var _HorizontalTable = _interopRequireDefault(require("./HorizontalTable"));

var _util = require("./util");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

function noop() {}

function stopPropagation(e) {
  e.stopPropagation();

  if (e.nativeEvent.stopImmediatePropagation) {
    e.nativeEvent.stopImmediatePropagation();
  }
}

function DefaultExpandIcon(props) {
  var iconNode;
  var prefixCls = props.prefixCls;

  if (props.expandable) {
    iconNode = /*#__PURE__*/_react["default"].createElement(_RightO["default"], {
      className: "".concat(prefixCls, "-row-expand-icon ").concat(prefixCls, "-row-expand-icon-").concat(props.expanded ? 'expanded' : 'collapsed'),
      onClick: function onClick(e) {
        props.onExpand(props.record, e);
      }
    });
  }

  return iconNode;
}

var defaultLocale = {
  filterTitle: '筛选',
  filterConfirm: '确定',
  filterReset: '重置',
  emptyText: /*#__PURE__*/_react["default"].createElement("span", null, /*#__PURE__*/_react["default"].createElement(_FrownO["default"], null), "\u6682\u65E0\u6570\u636E"),
  selectAll: '全选当页',
  selectInvert: '反选当页'
};
var defaultPagination = {
  onChange: noop,
  onShowSizeChange: noop
};
/**
 * Avoid creating new object, so that parent component's shouldComponentUpdate
 * can works appropriately。
 */

var emptyObject = {};

var Table = /*#__PURE__*/function (_React$Component) {
  _inherits(Table, _React$Component);

  var _super = _createSuper(Table);

  function Table(props) {
    var _this;

    _classCallCheck(this, Table);

    _this = _super.call(this, props);

    _this.getCheckboxPropsByItem = function (item, index) {
      var _this$props$rowSelect = _this.props.rowSelection,
          rowSelection = _this$props$rowSelect === void 0 ? {} : _this$props$rowSelect;

      if (!rowSelection.getCheckboxProps) {
        return {};
      }

      var key = _this.getRecordKey(item, index); // Cache checkboxProps


      if (!_this.CheckboxPropsCache[key]) {
        _this.CheckboxPropsCache[key] = rowSelection.getCheckboxProps(item);
      }

      return _this.CheckboxPropsCache[key];
    };

    _this.toggleSortOrder = function (column) {
      // console.log('toggleSortOrder',classList, event.target)
      var sortDirections = column.sortDirections || _this.props.sortDirections;
      var sortOrder = _this.state.sortOrder; // 只同时允许一列进行排序，否则会导致排序顺序的逻辑问题

      var newSortOrder;

      var isSortColumn = _this.isSortColumn(column);

      if (!isSortColumn && sortOrder !== undefined) {
        // 当前列未排序
        newSortOrder = sortDirections[0];
      } else {
        // 当前列已排序
        var methodIndex = sortDirections.indexOf(sortOrder) + 1;
        newSortOrder = methodIndex === sortDirections.length ? sortDirections[0] : sortDirections[methodIndex];
      }

      var newState = {
        sortOrder: newSortOrder,
        sortColumn: newSortOrder ? column : null
      }; // Controlled

      if (_this.getSortOrderColumns().length === 0) {
        _this.setState(newState);
      }

      var onChange = _this.props.onChange;

      if (onChange) {
        onChange.apply(null, _this.prepareParamsArguments(_extends(_extends({}, _this.state), newState)));
      }
    };

    _this.handleFilterClick = function (e) {
      e.stopPropagation(); // 拦截点击filter面板触发的点击事件
    };

    _this.handleFilter = function (column, nextFilters) {
      var props = _this.props;

      var pagination = _extends({}, _this.state.pagination);

      var filters = _extends(_extends({}, _this.state.filters), _defineProperty({}, _this.getColumnKey(column), nextFilters)); // Remove filters not in current columns


      var currentColumnKeys = [];
      (0, _util.treeMap)(_this.columns, function (c) {
        if (!c.children) {
          currentColumnKeys.push(_this.getColumnKey(c));
        }
      });
      Object.keys(filters).forEach(function (columnKey) {
        if (currentColumnKeys.indexOf(columnKey) < 0) {
          delete filters[columnKey];
        }
      });

      if (props.pagination) {
        // Reset current prop
        pagination.current = 1;
        pagination.onChange(pagination.current);
      }

      var newState = {
        pagination: pagination,
        filters: {}
      };

      var filtersToSetState = _extends({}, filters); // Remove filters which is controlled


      _this.getFilteredValueColumns().forEach(function (col) {
        var columnKey = _this.getColumnKey(col);

        if (columnKey) {
          delete filtersToSetState[columnKey];
        }
      });

      if (Object.keys(filtersToSetState).length > 0) {
        newState.filters = filtersToSetState;
      } // Controlled current prop will not respond user interaction


      if (_typeof(props.pagination) === 'object' && 'current' in props.pagination) {
        newState.pagination = _extends(_extends({}, pagination), {
          current: _this.state.pagination.current
        });
      }

      _this.setState(newState, function () {
        _this.store.setState({
          selectionDirty: false
        });

        var onChange = _this.props.onChange;

        if (onChange) {
          onChange.apply(null, _this.prepareParamsArguments(_extends(_extends({}, _this.state), {
            selectionDirty: false,
            filters: filters,
            pagination: pagination
          })));
        }
      });
    };

    _this.handleSelect = function (record, rowIndex, e) {
      var checked = e.target.checked;
      var defaultSelection = _this.store.getState().selectionDirty ? [] : _this.getDefaultSelection();

      var selectedRowKeys = _this.store.getState().selectedRowKeys.concat(defaultSelection);

      var key = _this.getRecordKey(record, rowIndex);

      if (checked) {
        selectedRowKeys.push(_this.getRecordKey(record, rowIndex));
      } else {
        selectedRowKeys = selectedRowKeys.filter(function (i) {
          return key !== i;
        });
      }

      _this.store.setState({
        selectionDirty: true
      });

      _this.setSelectedRowKeys(selectedRowKeys, {
        selectWay: 'onSelect',
        record: record,
        checked: checked
      });
    };

    _this.handleRadioSelect = function (record, rowIndex, e) {
      var checked = e.target.checked;
      var defaultSelection = _this.store.getState().selectionDirty ? [] : _this.getDefaultSelection();

      var selectedRowKeys = _this.store.getState().selectedRowKeys.concat(defaultSelection);

      var key = _this.getRecordKey(record, rowIndex);

      selectedRowKeys = [key];

      _this.store.setState({
        selectionDirty: true
      });

      _this.setSelectedRowKeys(selectedRowKeys, {
        selectWay: 'onSelect',
        record: record,
        checked: checked
      });
    };

    _this.handleSelectRow = function (selectionKey, index, onSelectFunc) {
      var data = _this.getFlatCurrentPageData();

      var defaultSelection = _this.store.getState().selectionDirty ? [] : _this.getDefaultSelection();

      var selectedRowKeys = _this.store.getState().selectedRowKeys.concat(defaultSelection);

      var changeableRowKeys = data.filter(function (item, i) {
        return !_this.getCheckboxPropsByItem(item, i).disabled;
      }).map(function (item, i) {
        return _this.getRecordKey(item, i);
      });
      var changeRowKeys = [];
      var selectWay = '';
      var checked; // handle default selection

      switch (selectionKey) {
        case 'all':
          changeableRowKeys.forEach(function (key) {
            if (selectedRowKeys.indexOf(key) < 0) {
              selectedRowKeys.push(key);
              changeRowKeys.push(key);
            }
          });
          selectWay = 'onSelectAll';
          checked = true;
          break;

        case 'removeAll':
          changeableRowKeys.forEach(function (key) {
            if (selectedRowKeys.indexOf(key) >= 0) {
              selectedRowKeys.splice(selectedRowKeys.indexOf(key), 1);
              changeRowKeys.push(key);
            }
          });
          selectWay = 'onSelectAll';
          checked = false;
          break;

        case 'invert':
          changeableRowKeys.forEach(function (key) {
            if (selectedRowKeys.indexOf(key) < 0) {
              selectedRowKeys.push(key);
            } else {
              selectedRowKeys.splice(selectedRowKeys.indexOf(key), 1);
            }

            changeRowKeys.push(key);
            selectWay = 'onSelectInvert';
          });
          break;

        default:
          break;
      }

      _this.store.setState({
        selectionDirty: true
      }); // when select custom selection, callback selections[n].onSelect


      if (index > 1 && typeof onSelectFunc === 'function') {
        return onSelectFunc(changeableRowKeys);
      }

      _this.setSelectedRowKeys(selectedRowKeys, {
        selectWay: selectWay,
        checked: checked,
        changeRowKeys: changeRowKeys
      });
    };

    _this.handlePageChange = function (current) {
      var props = _this.props;

      var pagination = _extends({}, _this.state.pagination);

      if (current) {
        pagination.current = current;
      } else {
        pagination.current = pagination.current || 1;
      }

      for (var _len = arguments.length, otherArguments = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        otherArguments[_key - 1] = arguments[_key];
      }

      pagination.onChange.apply(pagination, [pagination.current].concat(otherArguments));
      var newState = {
        pagination: pagination
      }; // Controlled current prop will not respond user interaction

      if (props.pagination && _typeof(props.pagination) === 'object' && 'current' in props.pagination) {
        newState.pagination = _extends(_extends({}, pagination), {
          current: _this.state.pagination.current
        });
      }

      _this.setState(newState);

      _this.store.setState({
        selectionDirty: false
      });

      var onChange = _this.props.onChange;

      if (onChange) {
        onChange.apply(null, _this.prepareParamsArguments(_extends(_extends({}, _this.state), {
          selectionDirty: false,
          pagination: pagination
        })));
      }
    };

    _this.renderSelectionBox = function (type) {
      return function (_, record, index) {
        var rowIndex = _this.getRecordKey(record, index); // 从 1 开始


        var props = _this.getCheckboxPropsByItem(record, index);

        var handleChange = function handleChange(e) {
          type === 'radio' ? _this.handleRadioSelect(record, rowIndex, e) : _this.handleSelect(record, rowIndex, e);
        };

        return /*#__PURE__*/_react["default"].createElement("span", {
          onClick: stopPropagation
        }, /*#__PURE__*/_react["default"].createElement(_SelectionBox["default"], {
          type: type,
          store: _this.store,
          rowIndex: rowIndex,
          disabled: props.disabled,
          onChange: handleChange,
          defaultSelection: _this.getDefaultSelection()
        }));
      };
    };

    _this.getRecordKey = function (record, index) {
      var rowKey = _this.props.rowKey;
      var recordKey = typeof rowKey === 'function' ? rowKey(record, index) : record[rowKey];
      (0, _warning["default"])(recordKey !== undefined, 'Each record in dataSource of table should have a unique `key` prop, or set `rowKey` to an unique primary key,' + 'see https://u.ant.design/table-row-key');
      return recordKey === undefined ? index : recordKey;
    };

    _this.getPopupContainer = function () {
      return (0, _reactDom.findDOMNode)(_assertThisInitialized(_this));
    };

    _this.handleShowSizeChange = function (current, pageSize) {
      var pagination = _this.state.pagination;
      pagination.onShowSizeChange(current, pageSize);

      var nextPagination = _extends(_extends({}, pagination), {
        pageSize: pageSize,
        current: current
      });

      _this.setState({
        pagination: nextPagination
      });

      var onChange = _this.props.onChange;

      if (onChange) {
        onChange.apply(null, _this.prepareParamsArguments(_extends(_extends({}, _this.state), {
          pagination: nextPagination
        })));
      }
    };

    (0, _warning["default"])(!('columnsPageRange' in props || 'columnsPageSize' in props), '`columnsPageRange` and `columnsPageSize` are removed, please use ' + 'fixed columns instead, see: https://u.ant.design/fixed-columns.');
    _this.columns = props.columns || (0, _util.normalizeColumns)(props.children);
    _this.state = _extends(_extends({}, _this.getDefaultSortOrder(_this.columns)), {
      // 减少状态
      filters: _this.getFiltersFromColumns(),
      pagination: _this.getDefaultPagination(props)
    });
    _this.CheckboxPropsCache = {};
    _this.store = (0, _createStore["default"])({
      selectedRowKeys: (props.rowSelection || {}).selectedRowKeys || [],
      selectionDirty: false
    });
    return _this;
  }

  _createClass(Table, [{
    key: "getDefaultSelection",
    value: function getDefaultSelection() {
      var _this2 = this;

      var _this$props$rowSelect2 = this.props.rowSelection,
          rowSelection = _this$props$rowSelect2 === void 0 ? {} : _this$props$rowSelect2;

      if (!rowSelection.getCheckboxProps) {
        return [];
      }

      return this.getFlatData().filter(function (item, rowIndex) {
        return _this2.getCheckboxPropsByItem(item, rowIndex).defaultChecked;
      }).map(function (record, rowIndex) {
        return _this2.getRecordKey(record, rowIndex);
      });
    }
  }, {
    key: "getDefaultPagination",
    value: function getDefaultPagination(props) {
      var pagination = props.pagination || {};
      return this.hasPagination(props) ? _extends(_extends(_extends({}, defaultPagination), pagination), {
        current: pagination.defaultCurrent || pagination.current || 1,
        pageSize: pagination.defaultPageSize || pagination.pageSize || 10
      }) : {};
    }
  }, {
    key: "getLocale",
    value: function getLocale() {
      var locale = {};

      if (this.context.antLocale && this.context.antLocale.Table) {
        locale = this.context.antLocale.Table;
      }

      return _extends(_extends(_extends({}, defaultLocale), locale), this.props.locale);
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      this.columns = nextProps.columns || (0, _util.normalizeColumns)(nextProps.children);

      if ('pagination' in nextProps || 'pagination' in this.props) {
        this.setState(function (previousState) {
          var newPagination = _extends(_extends(_extends({}, defaultPagination), previousState.pagination), nextProps.pagination);

          newPagination.current = newPagination.current || 1;
          newPagination.pageSize = newPagination.pageSize || 10;
          return {
            pagination: nextProps.pagination !== false ? newPagination : emptyObject
          };
        });
      }

      if (nextProps.rowSelection && 'selectedRowKeys' in nextProps.rowSelection) {
        this.store.setState({
          selectedRowKeys: nextProps.rowSelection.selectedRowKeys || []
        });
        var rowSelection = this.props.rowSelection;

        if (rowSelection && nextProps.rowSelection.getCheckboxProps !== rowSelection.getCheckboxProps) {
          this.CheckboxPropsCache = {};
        }
      }

      if ('dataSource' in nextProps && nextProps.dataSource !== this.props.dataSource) {
        this.store.setState({
          selectionDirty: false
        });
        this.CheckboxPropsCache = {};
      }

      if (this.getSortOrderColumns(this.columns).length > 0) {
        var sortState = this.getSortStateFromColumns(this.columns);

        if (sortState.sortColumn !== this.state.sortColumn || sortState.sortOrder !== this.state.sortOrder) {
          this.setState(sortState);
        }
      }

      var filteredValueColumns = this.getFilteredValueColumns(this.columns);

      if (filteredValueColumns.length > 0) {
        var filtersFromColumns = this.getFiltersFromColumns(this.columns);

        var newFilters = _extends({}, this.state.filters);

        Object.keys(filtersFromColumns).forEach(function (key) {
          newFilters[key] = filtersFromColumns[key];
        });

        if (this.isFiltersChanged(newFilters)) {
          this.setState({
            filters: newFilters
          });
        }
      }
    }
  }, {
    key: "setSelectedRowKeys",
    value: function setSelectedRowKeys(selectedRowKeys, _ref) {
      var _this3 = this;

      var selectWay = _ref.selectWay,
          record = _ref.record,
          checked = _ref.checked,
          changeRowKeys = _ref.changeRowKeys;
      var _this$props$rowSelect3 = this.props.rowSelection,
          rowSelection = _this$props$rowSelect3 === void 0 ? {} : _this$props$rowSelect3;

      if (rowSelection && !('selectedRowKeys' in rowSelection)) {
        this.store.setState({
          selectedRowKeys: selectedRowKeys
        });
      }

      var data = this.getFlatData();

      if (!rowSelection.onChange && !rowSelection[selectWay]) {
        return;
      }

      var selectedRows = data.filter(function (row, i) {
        return selectedRowKeys.indexOf(_this3.getRecordKey(row, i)) >= 0;
      });

      if (rowSelection.onChange) {
        rowSelection.onChange(selectedRowKeys, selectedRows);
      }

      if (selectWay === 'onSelect' && rowSelection.onSelect) {
        rowSelection.onSelect(record, checked, selectedRows);
      } else if (selectWay === 'onSelectAll' && rowSelection.onSelectAll) {
        var changeRows = data.filter(function (row, i) {
          return changeRowKeys.indexOf(_this3.getRecordKey(row, i)) >= 0;
        });
        rowSelection.onSelectAll(checked, selectedRows, changeRows);
      } else if (selectWay === 'onSelectInvert' && rowSelection.onSelectInvert) {
        rowSelection.onSelectInvert(selectedRowKeys);
      }
    }
  }, {
    key: "hasPagination",
    value: function hasPagination(props) {
      return (props || this.props).pagination !== false;
    }
  }, {
    key: "isFiltersChanged",
    value: function isFiltersChanged(filters) {
      var _this4 = this;

      var filtersChanged = false;

      if (Object.keys(filters).length !== Object.keys(this.state.filters).length) {
        filtersChanged = true;
      } else {
        Object.keys(filters).forEach(function (columnKey) {
          if (filters[columnKey] !== _this4.state.filters[columnKey]) {
            filtersChanged = true;
          }
        });
      }

      return filtersChanged;
    }
  }, {
    key: "getSortOrderColumns",
    value: function getSortOrderColumns(columns) {
      return (0, _util.flatFilter)(columns || this.columns || [], function (column) {
        return 'sortOrder' in column;
      });
    }
  }, {
    key: "getFilteredValueColumns",
    value: function getFilteredValueColumns(columns) {
      return (0, _util.flatFilter)(columns || this.columns || [], function (column) {
        return typeof column.filteredValue !== 'undefined';
      });
    }
  }, {
    key: "getFiltersFromColumns",
    value: function getFiltersFromColumns(columns) {
      var _this5 = this;

      var filters = {};
      this.getFilteredValueColumns(columns).forEach(function (col) {
        filters[_this5.getColumnKey(col)] = col.filteredValue;
      });
      return filters;
    }
  }, {
    key: "getDefaultSortOrder",
    value: function getDefaultSortOrder(columns) {
      var definedSortState = this.getSortStateFromColumns(columns);
      var defaultSortedColumn = (0, _util.flatFilter)(columns || [], function (column) {
        return column.defaultSortOrder != null;
      })[0];

      if (defaultSortedColumn && !definedSortState.sortColumn) {
        return {
          sortColumn: defaultSortedColumn,
          sortOrder: defaultSortedColumn.defaultSortOrder
        };
      }

      return definedSortState;
    }
  }, {
    key: "getSortStateFromColumns",
    value: function getSortStateFromColumns(columns) {
      // return fisrt column which sortOrder is not falsy
      var sortedColumn = this.getSortOrderColumns(columns).filter(function (col) {
        return col.sortOrder;
      })[0];

      if (sortedColumn) {
        return {
          sortColumn: sortedColumn,
          sortOrder: sortedColumn.sortOrder
        };
      }

      return {
        sortColumn: null,
        sortOrder: null
      };
    }
  }, {
    key: "getSorterFn",
    value: function getSorterFn() {
      var _this$state = this.state,
          sortOrder = _this$state.sortOrder,
          sortColumn = _this$state.sortColumn;

      if (!sortOrder || !sortColumn || typeof sortColumn.sorter !== 'function') {
        return;
      }

      return function (a, b) {
        var result = sortColumn.sorter(a, b);

        if (result !== 0) {
          return sortOrder === 'descend' ? -result : result;
        }

        return 0;
      };
    }
  }, {
    key: "renderRowSelection",
    value: function renderRowSelection() {
      var _this6 = this;

      var _this$props = this.props,
          prefixCls = _this$props.prefixCls,
          rowSelection = _this$props.rowSelection;
      var columns = this.columns.concat();

      if (rowSelection) {
        var data = this.getFlatCurrentPageData().filter(function (item, index) {
          if (rowSelection.getCheckboxProps) {
            return !_this6.getCheckboxPropsByItem(item, index).disabled;
          }

          return true;
        });
        var selectionColumnClass = (0, _classnames["default"])("".concat(prefixCls, "-selection-column"), _defineProperty({}, "".concat(prefixCls, "-selection-column-custom"), rowSelection.selections));

        var selectionColumn = _defineProperty({
          key: 'selection-column',
          render: this.renderSelectionBox(rowSelection.type),
          className: selectionColumnClass
        }, _rcTable.INTERNAL_COL_DEFINE, {
          className: "".concat(prefixCls, "-selection-col")
        });

        if (rowSelection.type !== 'radio') {
          var checkboxAllDisabled = data.every(function (item, index) {
            return _this6.getCheckboxPropsByItem(item, index).disabled;
          });
          selectionColumn.title = /*#__PURE__*/_react["default"].createElement(_SelectionCheckboxAll["default"], {
            store: this.store,
            locale: this.getLocale(),
            data: data,
            getCheckboxPropsByItem: this.getCheckboxPropsByItem,
            getRecordKey: this.getRecordKey,
            disabled: checkboxAllDisabled,
            prefixCls: prefixCls,
            onSelect: this.handleSelectRow,
            selections: rowSelection.selections,
            getPopupContainer: this.getPopupContainer
          });
        }

        if (columns.some(function (column) {
          return column.fixed === 'left' || column.fixed === true;
        })) {
          selectionColumn.fixed = 'left';
        }

        if (columns[0] && columns[0].key === 'selection-column') {
          columns[0] = selectionColumn;
        } else {
          columns.unshift(selectionColumn);
        }
      }

      return columns;
    }
  }, {
    key: "getColumnKey",
    value: function getColumnKey(column, index) {
      return column.key || column.dataIndex || index;
    }
  }, {
    key: "getMaxCurrent",
    value: function getMaxCurrent(total) {
      var _this$state$paginatio = this.state.pagination,
          current = _this$state$paginatio.current,
          pageSize = _this$state$paginatio.pageSize;

      if ((current - 1) * pageSize >= total) {
        return Math.floor((total - 1) / pageSize) + 1;
      }

      return current;
    }
  }, {
    key: "isSortColumn",
    value: function isSortColumn(column) {
      var sortColumn = this.state.sortColumn;

      if (!column || !sortColumn) {
        return false;
      }

      return this.getColumnKey(sortColumn) === this.getColumnKey(column);
    }
  }, {
    key: "renderColumnsDropdown",
    value: function renderColumnsDropdown(columns) {
      var _this7 = this;

      var _this$props2 = this.props,
          prefixCls = _this$props2.prefixCls,
          dropdownPrefixCls = _this$props2.dropdownPrefixCls;
      var sortOrder = this.state.sortOrder;
      var locale = this.getLocale();
      return (0, _util.treeMap)(columns, function (originColumn, i) {
        var column = _extends({}, originColumn);

        var key = _this7.getColumnKey(column, i);

        var filterDropdown;
        var sortButton;

        if (column.filters && column.filters.length > 0 || column.filterDropdown) {
          var colFilters = _this7.state.filters[key] || [];
          filterDropdown = /*#__PURE__*/_react["default"].createElement(_filterDropdown["default"], {
            locale: locale,
            column: column,
            selectedKeys: colFilters,
            confirmFilter: _this7.handleFilter,
            prefixCls: "".concat(prefixCls, "-filter"),
            dropdownPrefixCls: dropdownPrefixCls || 'w-dropdown',
            getPopupContainer: _this7.getPopupContainer
          });
        }

        var isAscend = false;
        var isDescend = false;

        if (column.sorter) {
          var isSortColumn = _this7.isSortColumn(column);

          if (isSortColumn) {
            column.className = column.className || '';

            if (sortOrder) {
              column.className += " ".concat(prefixCls, "-column-sort");
            }
          }

          isAscend = isSortColumn && sortOrder === 'ascend';
          isDescend = isSortColumn && sortOrder === 'descend';
          sortButton = isAscend ? /*#__PURE__*/_react["default"].createElement("span", {
            className: "".concat(prefixCls, "-column-sorter-icon ").concat(prefixCls, "-column-sorter-up"),
            title: "\u2191"
          }, /*#__PURE__*/_react["default"].createElement(_ArrowUpO["default"], null)) : isDescend ? /*#__PURE__*/_react["default"].createElement("span", {
            className: "".concat(prefixCls, "-column-sorter-icon ").concat(prefixCls, "-column-sorter-down"),
            title: "\u2193"
          }, /*#__PURE__*/_react["default"].createElement(_ArrowDownO["default"], null)) : null;
        } // filterDropdown放在sorter-handler中会异常触发onClick，猜测是rc-trigger(rc-dropdown)问题,升级后并未解决
        // 目前使用handleFilterClick拦截


        column.title = /*#__PURE__*/_react["default"].createElement("div", {
          className: column.sorter ? "".concat(prefixCls, "-column-sorter-handler") : undefined,
          onClick: column.sorter ? function () {
            return _this7.toggleSortOrder(column);
          } : undefined
        }, sortButton, column.title, /*#__PURE__*/_react["default"].createElement("span", {
          onClick: _this7.handleFilterClick
        }, filterDropdown));
        return column;
      });
    }
  }, {
    key: "renderPagination",
    value: function renderPagination() {
      // 强制不需要分页
      if (!this.hasPagination()) {
        return null;
      }

      var size = 'default';
      var pagination = this.state.pagination;

      if (pagination.size) {
        size = pagination.size;
      } else if (this.props.size === 'middle' || this.props.size === 'small') {
        size = 'small';
      }

      var total = pagination.total || this.getLocalData().length;
      return total > 0 ? /*#__PURE__*/_react["default"].createElement(_pagination["default"], _extends({
        key: "pagination"
      }, pagination, {
        className: (0, _classnames["default"])(pagination.className, "".concat(this.props.prefixCls, "-pagination")),
        onChange: this.handlePageChange,
        total: total,
        size: size,
        current: this.getMaxCurrent(total),
        onShowSizeChange: this.handleShowSizeChange
      })) : null;
    } // Get pagination, filters, sorter

  }, {
    key: "prepareParamsArguments",
    value: function prepareParamsArguments(state) {
      var pagination = _extends({}, state.pagination); // remove useless handle function in Table.onChange


      delete pagination.onChange;
      delete pagination.onShowSizeChange;
      var filters = state.filters;
      var sorter = {};

      if (state.sortColumn && state.sortOrder) {
        sorter.column = state.sortColumn;
        sorter.order = state.sortOrder;
        sorter.field = state.sortColumn.dataIndex;
        sorter.columnKey = this.getColumnKey(state.sortColumn);
      }

      return [pagination, filters, sorter];
    }
  }, {
    key: "findColumn",
    value: function findColumn(myKey) {
      var _this8 = this;

      var column;
      (0, _util.treeMap)(this.columns, function (c) {
        if (_this8.getColumnKey(c) === myKey) {
          column = c;
        }
      });
      return column;
    }
  }, {
    key: "getCurrentPageData",
    value: function getCurrentPageData() {
      var data = this.getLocalData(); // console.log('getCurrentPageData',data)

      var current;
      var pageSize;
      var state = this.state; // 如果没有分页的话，默认全部展示

      if (!this.hasPagination()) {
        pageSize = Number.MAX_VALUE;
        current = 1;
      } else {
        pageSize = state.pagination.pageSize;
        current = this.getMaxCurrent(state.pagination.total || data.length);
      } // 分页
      // ---
      // 当数据量少于等于每页数量时，直接设置数据
      // 否则进行读取分页数据
      // pageSize === Number.MAX_VALUE的时候为啥还要计算?


      if (data.length > pageSize) {
        data = data.filter(function (_, i) {
          return i >= (current - 1) * pageSize && i < current * pageSize;
        });
      }

      return data;
    }
  }, {
    key: "getFlatData",
    value: function getFlatData() {
      return (0, _util.flatArray)(this.getLocalData());
    }
  }, {
    key: "getFlatCurrentPageData",
    value: function getFlatCurrentPageData() {
      return (0, _util.flatArray)(this.getCurrentPageData());
    }
  }, {
    key: "recursiveSort",
    value: function recursiveSort(data, sorterFn) {
      var _this9 = this;

      var _this$props$childrenC = this.props.childrenColumnName,
          childrenColumnName = _this$props$childrenC === void 0 ? 'children' : _this$props$childrenC;
      return data.sort(sorterFn).map(function (item) {
        return item[childrenColumnName] ? _extends(_extends({}, item), _defineProperty({}, childrenColumnName, _this9.recursiveSort(item[childrenColumnName], sorterFn))) : item;
      });
    }
  }, {
    key: "getLocalData",
    value: function getLocalData() {
      var _this10 = this;

      var state = this.state;
      var dataSource = this.props.dataSource;
      var data = dataSource || []; // 优化本地排序

      data = data.slice(0);
      var sorterFn = this.getSorterFn();

      if (sorterFn) {
        data = this.recursiveSort(data, sorterFn);
      } // 筛选


      if (state.filters) {
        Object.keys(state.filters).forEach(function (columnKey) {
          var col = _this10.findColumn(columnKey);

          if (!col) {
            return;
          }

          var values = state.filters[columnKey] || [];

          if (values.length === 0) {
            return;
          }

          var onFilter = col.onFilter;
          data = onFilter ? data.filter(function (record) {
            return values.some(function (v) {
              return onFilter(v, record);
            });
          }) : data;
        });
      }

      return data;
    }
  }, {
    key: "render",
    value: function render() {
      var _classNames2,
          _this11 = this;

      var _a = this.props,
          style = _a.style,
          className = _a.className,
          prefixCls = _a.prefixCls,
          showHeader = _a.showHeader,
          striped = _a.striped,
          rowSelection = _a.rowSelection,
          rowClassName = _a.rowClassName,
          expandedRowKeys = _a.expandedRowKeys,
          expandedRowRender = _a.expandedRowRender,
          expandIcon = _a.expandIcon,
          defaultExpandedRowKeys = _a.defaultExpandedRowKeys,
          expandable = _a.expandable,
          restProps = __rest(_a, ["style", "className", "prefixCls", "showHeader", "striped", "rowSelection", "rowClassName", "expandedRowKeys", "expandedRowRender", "expandIcon", "defaultExpandedRowKeys", "expandable"]);

      var data = this.getCurrentPageData(); // console.log('table render',data);

      var columns = this.renderRowSelection();
      var locale = this.getLocale();
      var bordered = this.props.bordered; // true = solid , false = 默认 = default

      bordered = typeof bordered === 'boolean' ? bordered ? 'solid' : 'default' : typeof bordered === 'string' ? bordered || 'default' : 'default';
      var classString = (0, _classnames["default"])((_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls, "-").concat(this.props.size), true), _defineProperty(_classNames2, "".concat(prefixCls, "-bordered-").concat(bordered), bordered), _defineProperty(_classNames2, "".concat(prefixCls, "-empty"), !data.length), _defineProperty(_classNames2, "".concat(prefixCls, "-without-column-header"), !showHeader), _defineProperty(_classNames2, "".concat(prefixCls, "-striped"), striped), _classNames2));
      var finalRowClassName = striped ? function (record, index) {
        var stripedClass = index % 2 === 1 ? "".concat(prefixCls, "-row-even") : "".concat(prefixCls, "-row-odd");

        if (typeof rowClassName === 'function') {
          return (0, _classnames["default"])(rowClassName.call(this, record, index), stripedClass);
        }

        return stripedClass;
      } : rowClassName;
      columns = this.renderColumnsDropdown(columns); //deal with align & headerAlign

      columns = (0, _util.treeMap)(columns, function (column) {
        var _classNames3;

        var newColumn = _extends({}, column);

        newColumn.className = (0, _classnames["default"])((_classNames3 = {}, _defineProperty(_classNames3, "".concat(prefixCls, "-align-").concat(newColumn.align), newColumn.align), _defineProperty(_classNames3, "".concat(prefixCls, "-header-align-").concat(newColumn.headerAlign), newColumn.headerAlign), _classNames3), newColumn.className);
        return newColumn;
      }); // 原代码如此，未使用treeMap

      var pre,
          cLen = columns.length;
      columns = columns.map(function (column, i) {
        var newColumn = _extends({}, column);

        newColumn.key = _this11.getColumnKey(newColumn, i); // group前后需加上divider以示区分

        if (newColumn.children) {
          if (pre && !pre.children) {
            (0, _util.treeForEachLast)([pre], function (col) {
              col.className = (0, _classnames["default"])(col.className, "".concat(prefixCls, "-group-divider"));
            });
          } // 最后一列不加


          if (i !== cLen - 1) {
            (0, _util.treeForEachLast)([newColumn], function (col) {
              col.className = (0, _classnames["default"])(col.className, "".concat(prefixCls, "-group-divider"));
            });
          }
        }

        pre = newColumn;
        return newColumn;
      }); // 标记真正的最后一列（解决复杂多表头的情况）

      (0, _util.treeForEachLast)(columns, function (col) {
        col.className = (0, _classnames["default"])(col.className, "".concat(prefixCls, "-last-column"));
      }); // console.log('columns',columns);

      var expandIconColumnIndex = rowSelection ? 1 : 0;

      if ('expandIconColumnIndex' in restProps) {
        expandIconColumnIndex = restProps.expandIconColumnIndex;
      }

      var table = /*#__PURE__*/_react["default"].createElement(_rcTable["default"], _extends({
        key: "table"
      }, restProps, {
        prefixCls: prefixCls,
        data: data,
        columns: columns,
        rowClassName: finalRowClassName,
        showHeader: showHeader,
        className: classString,
        expandable: _extends({
          expandIconColumnIndex: expandIconColumnIndex,
          expandedRowRender: expandedRowRender,
          expandedRowKeys: expandedRowKeys,
          defaultExpandedRowKeys: defaultExpandedRowKeys,
          expandIcon: expandIcon || DefaultExpandIcon
        }, expandable),
        emptyText: function emptyText() {
          return locale.emptyText;
        }
      })); // if there is no pagination or no data,
      // the height of spin should decrease by half of pagination


      var paginationPatchClass = this.hasPagination() && data && data.length !== 0 ? "".concat(prefixCls, "-with-pagination") : "".concat(prefixCls, "-without-pagination");
      var loading = this.props.loading;

      if (typeof loading === 'boolean') {
        loading = {
          spinning: loading
        };
      }

      return /*#__PURE__*/_react["default"].createElement("div", {
        className: (0, _classnames["default"])("".concat(prefixCls, "-wrapper"), className),
        style: style
      }, /*#__PURE__*/_react["default"].createElement(_spin["default"], _extends({}, loading, {
        className: loading ? "".concat(paginationPatchClass, " ").concat(prefixCls, "-spin-holder") : ''
      }), table, this.renderPagination()));
    }
  }]);

  return Table;
}(_react["default"].Component);

exports["default"] = Table;
Table.Column = _Column["default"];
Table.ColumnGroup = _ColumnGroup["default"];
Table.HorizontalTable = _HorizontalTable["default"];
Table.propTypes = {
  dataSource: _propTypes["default"].array,
  columns: _propTypes["default"].array,
  prefixCls: _propTypes["default"].string,
  useFixedHeader: _propTypes["default"].bool,
  rowSelection: _propTypes["default"].object,
  className: _propTypes["default"].string,
  size: _propTypes["default"].string,
  loading: _propTypes["default"].oneOfType([_propTypes["default"].bool, _propTypes["default"].object]),
  bordered: _propTypes["default"].oneOfType([_propTypes["default"].bool, _propTypes["default"].string]),
  onChange: _propTypes["default"].func,
  locale: _propTypes["default"].object,
  dropdownPrefixCls: _propTypes["default"].string,
  sortDirections: _propTypes["default"].array
};
Table.defaultProps = {
  dataSource: [],
  prefixCls: 'w-table',
  useFixedHeader: false,
  rowSelection: null,
  className: '',
  size: 'default',
  loading: false,
  bordered: 'default',
  indentSize: 20,
  locale: {},
  rowKey: 'key',
  showHeader: true,
  striped: true,
  sortDirections: ['descend', 'ascend']
};
Table.contextTypes = {
  antLocale: _propTypes["default"].object
};
//# sourceMappingURL=Table.js.map
