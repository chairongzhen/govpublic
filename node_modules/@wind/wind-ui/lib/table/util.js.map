{"version":3,"sources":["table/util.jsx"],"names":["flatArray","data","childrenName","result","loop","array","forEach","item","newItem","push","length","treeMap","tree","mapper","map","node","index","extra","treeForEachLast","flatFilter","callback","reduce","acc","children","normalizeColumns","elements","columns","React","Children","element","isValidElement","column","props","key","type","__ANT_TABLE_COLUMN_GROUP"],"mappings":"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","sourcesContent":["import React from 'react';\nexport function flatArray(data = [], childrenName = 'children') {\n    const result = [];\n    const loop = (array) => {\n        array.forEach(item => {\n            if (item[childrenName]) {\n                const newItem = Object.assign({}, item);\n                delete newItem[childrenName];\n                result.push(newItem);\n                if (item[childrenName].length > 0) {\n                    loop(item[childrenName]);\n                }\n            }\n            else {\n                result.push(item);\n            }\n        });\n    };\n    loop(data);\n    return result;\n}\nexport function treeMap(tree, mapper, childrenName = 'children') {\n    return tree.map((node, index) => {\n        const extra = {};\n        if (node[childrenName]) {\n            extra[childrenName] = treeMap(node[childrenName], mapper, childrenName);\n        }\n        return Object.assign(Object.assign({}, mapper(node, index)), extra);\n    });\n}\n// 遍历数组及children数组的最后一个\nexport function treeForEachLast(tree, mapper, childrenName = 'children') {\n    if (tree && tree.length) {\n        mapper(tree[tree.length - 1]);\n        treeForEachLast(tree[tree.length - 1][childrenName], mapper, childrenName);\n    }\n}\nexport function flatFilter(tree, callback) {\n    return tree.reduce((acc, node) => {\n        if (callback(node)) {\n            acc.push(node);\n        }\n        if (node.children) {\n            const children = flatFilter(node.children, callback);\n            acc.push(...children);\n        }\n        return acc;\n    }, []);\n}\nexport function normalizeColumns(elements) {\n    const columns = [];\n    React.Children.forEach(elements, (element) => {\n        if (!React.isValidElement(element)) {\n            return;\n        }\n        const column = Object.assign({}, element.props);\n        if (element.key) {\n            column.key = element.key;\n        }\n        if (element.type && element.type.__ANT_TABLE_COLUMN_GROUP) {\n            column.children = normalizeColumns(column.children);\n        }\n        columns.push(column);\n    });\n    return columns;\n}\n"],"file":"util.js"}