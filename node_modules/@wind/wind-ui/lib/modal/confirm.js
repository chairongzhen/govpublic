"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = confirm;

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _classnames = _interopRequireDefault(require("classnames"));

var _QuestionCircleF = _interopRequireDefault(require("@wind/icons/lib/icons/QuestionCircleF"));

var _Modal = _interopRequireDefault(require("./Modal"));

var _ActionButton = _interopRequireDefault(require("./ActionButton"));

var _locale = require("./locale");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function confirm(config) {
  var props = _extends({
    icon: /*#__PURE__*/_react["default"].createElement(_QuestionCircleF["default"], null)
  }, config);

  var prefixCls = props.prefixCls || 'w-confirm';
  var div = document.createElement('div');
  document.body.appendChild(div);
  var width = props.width || 416;
  var style = props.style || {};
  var okType = props.okType || 'primary'; // 默认为 false，保持旧版默认行为

  var maskClosable = props.maskClosable === undefined ? false : props.maskClosable; // 默认为 true，保持向下兼容

  if (!('okCancel' in props)) {
    props.okCancel = true;
  }

  var runtimeLocale = (0, _locale.getConfirmLocale)();
  props.okText = props.okText || (props.okCancel ? runtimeLocale.okText : runtimeLocale.justOkText);
  props.cancelText = props.cancelText || runtimeLocale.cancelText;

  function close() {
    var unmountResult = _reactDom["default"].unmountComponentAtNode(div);

    if (unmountResult && div.parentNode) {
      div.parentNode.removeChild(div);
    }

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var triggerCancel = args && args.length && args.some(function (param) {
      return param && param.triggerCancel;
    });

    if (props.onCancel && triggerCancel) {
      props.onCancel.apply(props, args);
    }
  }

  var body = /*#__PURE__*/_react["default"].createElement("div", {
    className: "".concat(prefixCls, "-body")
  }, props.icon, /*#__PURE__*/_react["default"].createElement("span", {
    className: "".concat(prefixCls, "-title")
  }, props.title), /*#__PURE__*/_react["default"].createElement("div", {
    className: "".concat(prefixCls, "-content")
  }, props.content));

  var footer = null;

  if (props.okCancel) {
    footer = /*#__PURE__*/_react["default"].createElement("div", {
      className: "".concat(prefixCls, "-btns")
    }, /*#__PURE__*/_react["default"].createElement(_ActionButton["default"], {
      actionFn: props.onCancel,
      closeModal: close
    }, props.cancelText), /*#__PURE__*/_react["default"].createElement(_ActionButton["default"], {
      type: okType,
      actionFn: props.onOk,
      closeModal: close,
      autoFocus: true
    }, props.okText));
  } else {
    footer = /*#__PURE__*/_react["default"].createElement("div", {
      className: "".concat(prefixCls, "-btns")
    }, /*#__PURE__*/_react["default"].createElement(_ActionButton["default"], {
      type: okType,
      actionFn: props.onOk,
      closeModal: close,
      autoFocus: true
    }, props.okText));
  }

  var classString = (0, _classnames["default"])(prefixCls, _defineProperty({}, "".concat(prefixCls, "-").concat(props.type), true), props.className);

  _reactDom["default"].render( /*#__PURE__*/_react["default"].createElement(_Modal["default"], {
    className: classString,
    onCancel: close.bind(this, {
      triggerCancel: true
    }),
    visible: true,
    title: "",
    transitionName: "zoom",
    footer: "",
    maskTransitionName: "fade",
    maskClosable: maskClosable,
    style: style,
    width: width
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: "".concat(prefixCls, "-body-wrapper")
  }, body, " ", footer)), div);

  return {
    destroy: close
  };
}
//# sourceMappingURL=confirm.js.map
