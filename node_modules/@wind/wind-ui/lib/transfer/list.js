"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _PureRenderMixin = _interopRequireDefault(require("rc-util/lib/PureRenderMixin"));

var _reactWindow = require("react-window");

var _checkbox = _interopRequireDefault(require("../checkbox"));

var _search = _interopRequireDefault(require("./search"));

var _item = _interopRequireDefault(require("./item"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

// import triggerEvent from '../_util/triggerEvent';
function noop() {}

function isRenderResultPlainObject(result) {
  return result && ! /*#__PURE__*/_react["default"].isValidElement(result) && Object.prototype.toString.call(result) === '[object Object]';
}

var TransferList = /*#__PURE__*/function (_React$Component) {
  _inherits(TransferList, _React$Component);

  var _super = _createSuper(TransferList);

  function TransferList(props) {
    var _this;

    _classCallCheck(this, TransferList);

    _this = _super.call(this, props);

    _this.handleSelect = function (selectedItem) {
      var checkedKeys = _this.props.checkedKeys;
      var result = checkedKeys.some(function (key) {
        return key === selectedItem.key;
      });

      _this.props.handleSelect(selectedItem, !result);
    };

    _this.handleFilter = function (e) {
      _this.props.handleFilter(e);

      if (!e.target.value) {
        return;
      } // Manually trigger scroll event for lazy search bug
      // https://github.com/ant-design/ant-design/issues/5631
      // this.triggerScrollTimer = window.setTimeout(() => {
      //   const dom: any = findDOMNode(this);
      //   if (dom) {
      //     const listNode = dom.querySelectorAll('.w-transfer-list-content')[0];
      //     if (listNode) {
      //       triggerEvent(listNode, 'scroll');
      //     }
      //   }
      // }, 0);

    };

    _this.handleClear = function () {
      _this.props.handleClear();
    };

    _this.matchFilter = function (text, item) {
      var _this$props = _this.props,
          filter = _this$props.filter,
          filterOption = _this$props.filterOption;

      if (filterOption) {
        return filterOption(filter, item);
      }

      return text.indexOf(filter) >= 0;
    };

    _this.renderItem = function (item) {
      var _this$props$render = _this.props.render,
          render = _this$props$render === void 0 ? noop : _this$props$render;
      var renderResult = render(item);
      var isRenderResultPlain = isRenderResultPlainObject(renderResult);
      return {
        renderedText: isRenderResultPlain ? renderResult.value : renderResult,
        renderedEl: isRenderResultPlain ? renderResult.label : renderResult
      };
    };

    _this.state = {
      mounted: false,
      contentHeight: 0
    };
    _this.myRef = /*#__PURE__*/_react["default"].createRef();
    return _this;
  }

  _createClass(TransferList, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      var current = this.myRef.current;
      var prefixCls = this.props.prefixCls;

      if (current) {
        var listContent = current.querySelector(".".concat(prefixCls, "-content"));

        if (listContent) {
          this.setState({
            contentHeight: listContent.clientHeight
          });
        }
      } //w-transfer-list-content


      this.timer = window.setTimeout(function () {
        _this2.setState({
          mounted: true
        });
      }, 0);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearTimeout(this.timer);
      clearTimeout(this.triggerScrollTimer);
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _PureRenderMixin["default"].shouldComponentUpdate.apply(this, args);
    }
  }, {
    key: "getCheckStatus",
    value: function getCheckStatus(filteredDataSource) {
      var checkedKeys = this.props.checkedKeys;

      if (checkedKeys.length === 0) {
        return 'none';
      } else if (filteredDataSource.every(function (item) {
        return checkedKeys.indexOf(item.key) >= 0;
      })) {
        return 'all';
      }

      return 'part';
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this,
          _classNames2;

      var _this$props2 = this.props,
          prefixCls = _this$props2.prefixCls,
          dataSource = _this$props2.dataSource,
          titleText = _this$props2.titleText,
          checkedKeys = _this$props2.checkedKeys,
          lazy = _this$props2.lazy,
          _this$props2$body = _this$props2.body,
          body = _this$props2$body === void 0 ? noop : _this$props2$body,
          _this$props2$footer = _this$props2.footer,
          footer = _this$props2$footer === void 0 ? noop : _this$props2$footer,
          showSearch = _this$props2.showSearch,
          style = _this$props2.style,
          filter = _this$props2.filter,
          searchPlaceholder = _this$props2.searchPlaceholder,
          notFoundContent = _this$props2.notFoundContent,
          selectAllText = _this$props2.selectAllText;
      var contentHeight = this.state.contentHeight; // Custom Layout

      var footerDom = footer(_extends({}, this.props));
      var bodyDom = body(_extends({}, this.props));
      var listCls = (0, _classnames["default"])(prefixCls, _defineProperty({}, "".concat(prefixCls, "-with-footer"), !!footerDom));
      var filteredDataSource = [];
      var totalDataSource = [];
      var showItems = [];
      dataSource.forEach(function (item) {
        var _this3$renderItem = _this3.renderItem(item),
            renderedText = _this3$renderItem.renderedText,
            renderedEl = _this3$renderItem.renderedEl;

        if (filter && filter.trim() && !_this3.matchFilter(renderedText, item)) {
          return null;
        } // all show items


        totalDataSource.push(item);

        if (!item.disabled) {
          // response to checkAll items
          filteredDataSource.push(item);
        }

        var checked = checkedKeys.indexOf(item.key) >= 0;
        showItems.push({
          key: item.key,
          item: item,
          renderedText: renderedText,
          renderedEl: renderedEl,
          checked: checked,
          prefixCls: prefixCls,
          onClick: _this3.handleSelect
        });
      }); // const unit = dataSource.length > 1 ? itemsUnit : itemUnit;

      var search = showSearch ? /*#__PURE__*/_react["default"].createElement("div", {
        className: "".concat(prefixCls, "-body-search-wrapper")
      }, /*#__PURE__*/_react["default"].createElement(_search["default"], {
        prefixCls: "".concat(prefixCls, "-search"),
        onChange: this.handleFilter,
        handleClear: this.handleClear,
        placeholder: searchPlaceholder,
        value: filter
      })) : null;
      var listBodyCls = (0, _classnames["default"])("".concat(prefixCls, "-body"), (_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefixCls, "-body-with-search"), showSearch), _defineProperty(_classNames2, "".concat(prefixCls, "-body-no-content"), showItems.length === 0), _classNames2));

      var listBody = bodyDom || /*#__PURE__*/_react["default"].createElement("div", {
        className: listBodyCls
      }, search, /*#__PURE__*/_react["default"].createElement("div", {
        className: "".concat(prefixCls, "-content")
      }, contentHeight > 0 ? /*#__PURE__*/_react["default"].createElement(_reactWindow.FixedSizeList, {
        height: contentHeight,
        itemCount: showItems.length,
        itemSize: lazy && lazy.height
      }, function (_ref) {
        var index = _ref.index,
            style = _ref.style;
        var item = showItems[index];
        return /*#__PURE__*/_react["default"].createElement(_item["default"], _extends({}, item, {
          style: style
        })); // <div key={showItems[index].key} style={style}>{showItems[index]}</div>
      }) : null), /*#__PURE__*/_react["default"].createElement("div", {
        className: "".concat(prefixCls, "-body-not-found")
      }, notFoundContent));

      var listFooter = footerDom ? /*#__PURE__*/_react["default"].createElement("div", {
        className: "".concat(prefixCls, "-footer")
      }, footerDom) : null;
      var checkStatus = this.getCheckStatus(filteredDataSource);
      var checkedAll = checkStatus === 'all';

      var checkAllCheckbox = /*#__PURE__*/_react["default"].createElement(_checkbox["default"], {
        ref: "checkbox",
        checked: checkedAll,
        indeterminate: checkStatus === 'part',
        onChange: function onChange() {
          return _this3.props.handleSelectAll(filteredDataSource, checkedAll);
        }
      }, /*#__PURE__*/_react["default"].createElement("span", {
        className: "".concat(prefixCls, "-header-selected")
      }, selectAllText, " (", /*#__PURE__*/_react["default"].createElement("span", null, "".concat(checkedKeys.length, "/") + totalDataSource.length), ")"));

      return /*#__PURE__*/_react["default"].createElement("div", {
        className: listCls,
        style: style,
        ref: this.myRef
      }, /*#__PURE__*/_react["default"].createElement("div", {
        className: "".concat(prefixCls, "-header")
      }, checkAllCheckbox, /*#__PURE__*/_react["default"].createElement("span", {
        className: "".concat(prefixCls, "-header-title")
      }, titleText)), listBody, listFooter);
    }
  }]);

  return TransferList;
}(_react["default"].Component);

exports["default"] = TransferList;
TransferList.defaultProps = {
  dataSource: [],
  titleText: '',
  showSearch: false,
  render: noop,
  lazy: {
    height: 32
  }
};
//# sourceMappingURL=list.js.map
