import React from 'react';
import SubMenu from './SubMenu';
import Item from './MenuItem';
export interface SelectParam {
    key: string;
    keyPath: Array<string>;
    item: any;
    domEvent: any;
    selectedKeys: Array<string>;
}
export interface ClickParam {
    key: string;
    keyPath: Array<string>;
    item: any;
    domEvent: any;
}
export declare type MenuTheme = 'light' | 'dark';
export declare type MenuSize = 'default' | 'small' | 'large';
export declare type MenuMode = 'vertical' | 'horizontal' | 'inline';
export interface MenuProps {
    id?: string;
    /** `light` `dark` */
    theme?: MenuTheme;
    /** enum: `vertical` `horizontal` `inline` */
    mode?: MenuMode;
    size?: MenuSize;
    selectable?: boolean;
    selectedKeys?: Array<string>;
    defaultSelectedKeys?: Array<string>;
    openKeys?: Array<string>;
    defaultOpenKeys?: Array<string>;
    onOpenChange?: (openKeys: string[]) => void;
    onSelect?: (param: SelectParam) => void;
    onDeselect?: (param: SelectParam) => void;
    onClick?: (param: ClickParam) => void;
    style?: React.CSSProperties;
    openAnimation?: string | Object;
    openTransitionName?: string | Object;
    className?: string;
    prefixCls?: string;
    multiple?: boolean;
    inlineIndent?: number;
    inlineCollapsed?: boolean;
}
export default class Menu extends React.Component<MenuProps, any> {
    static Divider: any;
    static Item: typeof Item;
    static SubMenu: typeof SubMenu;
    static ItemGroup: any;
    static defaultProps: {
        prefixCls: string;
        className: string;
        theme: string;
        inlineIndent: number;
        mode: string;
        size: string;
        builtinPlacements: {
            topLeft: {
                points: string[];
                overflow: {
                    adjustX: number;
                    adjustY: number;
                };
                offset: number[];
            };
            bottomLeft: {
                points: string[];
                overflow: {
                    adjustX: number;
                    adjustY: number;
                };
                offset: number[];
            };
            leftTop: {
                points: string[];
                overflow: {
                    adjustX: number;
                    adjustY: number;
                };
                offset: number[];
            };
            rightTop: {
                points: string[];
                overflow: {
                    adjustX: number;
                    adjustY: number;
                };
                offset: number[];
            };
        };
    };
    static childContextTypes: {
        inlineCollapsed: any;
        rootTheme: any;
        rootSize: any;
        rootMode: any;
    };
    static contextTypes: {
        siderCollapsed: any;
    };
    switchModeFromInline: boolean;
    inlineOpenKeys: never[];
    constructor(props: any);
    getChildContext(): {
        inlineCollapsed: any;
        rootTheme: "dark" | "light" | undefined;
        rootSize: "small" | "default" | "large" | undefined;
        rootMode: "inline" | "vertical" | "horizontal" | undefined;
    };
    componentWillReceiveProps(nextProps: any, nextContext: any): void;
    handleClick: (e: any) => void;
    handleOpenChange: (openKeys: string[]) => void;
    setOpenKeys(openKeys: any): void;
    getRealMenuMode(): "inline" | "vertical" | "horizontal" | undefined;
    getInlineCollapsed(): any;
    getMenuOpenAnimation(menuMode: any): Object | undefined;
    render(): JSX.Element;
}
