import React from 'react';
import { DraggableEvent, DraggableData } from 'react-draggable';
export interface ResizerData {
    node: HTMLElement;
    deltaX: number;
    deltaY: number;
    folded: boolean | undefined;
}
export interface ResizerProps {
    className?: string;
    style?: React.CSSProperties;
    type?: 'default' | 'magnet';
    direction?: 'n' | 's' | 'w' | 'e';
    theme?: string;
    foldable: boolean;
    defaultFolded?: boolean;
    foldedSize?: number;
    unfoldedSize?: number;
    onResize?: (e: DraggableEvent, data: ResizerData) => void | false;
}
interface ResizerState {
    folded?: boolean;
    foldedSize: number;
    unfoldedSize: number;
}
interface Resizer {
    toogleSize: number;
    node: HTMLElement;
    startData: DraggableData;
    min: number;
    max: number;
    delta: any;
    start: boolean;
}
declare class Resizer extends React.Component<ResizerProps, ResizerState> {
    static SiblingClassName: string;
    static defaultProps: {
        type: string;
        direction: string;
        theme: string;
        foldable: boolean;
        defaultFolded: boolean;
        foldedSize: number;
        unfoldedSize: number;
    };
    constructor(props: any);
    saveRef: (node: HTMLDivElement) => void;
    componentDidMount(): void;
    handleStart: (_e: DraggableEvent, data: DraggableData) => void;
    handleStop: (e: DraggableEvent, data: DraggableData) => void;
    handleDrag: (_e: DraggableEvent, data: DraggableData) => void;
    handleToogle: (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;
    render(): JSX.Element;
}
export default Resizer;
