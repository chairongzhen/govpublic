"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderIconDefinitionToSVGElement = renderIconDefinitionToSVGElement;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function renderIconDefinitionToSVGElement(icond) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (typeof icond.icon === 'function') {
    // no two-tone
    // const placeholders = options.placeholders || defaultColors;
    return renderAbstractNodeToSVGElement(icond.icon(), options);
  } // fill, outline


  return renderAbstractNodeToSVGElement(icond.icon, options);
}

function renderAbstractNodeToSVGElement(node, options) {
  var targetAttrs = node.tag === 'svg' ? _objectSpread(_objectSpread({}, node.attrs), options.extraSVGAttrs || {}) : node.attrs;
  var attrs = Object.keys(targetAttrs).reduce(function (acc, nextKey) {
    var key = nextKey;
    var value = targetAttrs[key];
    var token = "".concat(key, "=\"").concat(value, "\"");
    acc.push(token);
    return acc;
  }, []);
  var attrsToken = attrs.length ? ' ' + attrs.join(' ') : '';
  var children = (node.children || []).map(function (child) {
    return renderAbstractNodeToSVGElement(child, options);
  }).join('');

  if (children && children.length) {
    return "<".concat(node.tag).concat(attrsToken, ">").concat(children, "</").concat(node.tag, ">");
  }

  return "<".concat(node.tag).concat(attrsToken, " />");
}